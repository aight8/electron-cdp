"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const DebuggerError_1 = require("./DebuggerError");
/**
 * No description
 * @experimental
 */
class DeviceOrientation {
    constructor(dbg /* Electron.Debugger*/) {
        this.dbg = dbg; /* Electron.Debugger*/
        this.events = new EventEmitter();
        if (!this.dbg.isAttached()) {
            throw new Error(`Cannot create DeviceOrientation Domain Class because the debugger is not attached.`);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.on(event, listener);
    }
    assertError(error, commandName) {
        if ('message' in error && 'code' in error) {
            throw new DebuggerError_1.default(error.message, error.code, commandName);
        }
    }
    /** Overrides the Device Orientation. */
    async setDeviceOrientationOverride(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DeviceOrientation.setDeviceOrientationOverride', params, (error, result) => {
                this.assertError(error, 'DeviceOrientation.setDeviceOrientationOverride');
                resolve();
            });
        });
    }
    /** Clears the overridden Device Orientation. */
    async clearDeviceOrientationOverride() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DeviceOrientation.clearDeviceOrientationOverride', {}, (error, result) => {
                this.assertError(error, 'DeviceOrientation.clearDeviceOrientationOverride');
                resolve();
            });
        });
    }
}
exports.default = DeviceOrientation;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGV2aWNlT3JpZW50YXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9nZW5lcmF0ZWQtdHMvRGV2aWNlT3JpZW50YXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx1Q0FBc0M7QUFDdEMsbURBQTJDO0FBa0MzQzs7O0dBR0c7QUFDSDtJQUdJLFlBQTZCLEdBQVEsQ0FBQyxzQkFBc0I7UUFBL0IsUUFBRyxHQUFILEdBQUcsQ0FBSyxDQUFDLHNCQUFzQjtRQUZwRCxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQTtRQUkvQixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQUMsb0ZBQW9GLENBQUMsQ0FBQTtRQUN6RyxDQUFDO0lBQ0wsQ0FBQztJQUVNLEVBQUUsQ0FBQyxLQUFhLEVBQUUsUUFBa0I7UUFDdkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQ25DLENBQUM7SUFFTSxJQUFJLENBQUMsS0FBYSxFQUFFLFFBQWtCO1FBQ3pDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUNuQyxDQUFDO0lBRU8sV0FBVyxDQUFDLEtBQVUsRUFBRSxXQUFtQjtRQUMvQyxFQUFFLENBQUMsQ0FBQyxTQUFTLElBQUksS0FBSyxJQUFJLE1BQU0sSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLE1BQU0sSUFBSSx1QkFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQTtRQUNuRSxDQUFDO0lBQ0wsQ0FBQztJQUVELHdDQUF3QztJQUNqQyxLQUFLLENBQUMsNEJBQTRCLENBQUMsTUFBNkQ7UUFDbkcsTUFBTSxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQVksQ0FBQyxPQUFPLEVBQUUsTUFBTTtZQUNoRCxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxnREFBZ0QsRUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFVLEVBQUUsTUFBVztnQkFDbkcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsZ0RBQWdELENBQUMsQ0FBQTtnQkFDekUsT0FBTyxFQUFFLENBQUE7WUFDYixDQUFDLENBQUMsQ0FBQTtRQUNOLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztJQUVELGdEQUFnRDtJQUN6QyxLQUFLLENBQUMsOEJBQThCO1FBQ3ZDLE1BQU0sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFZLENBQUMsT0FBTyxFQUFFLE1BQU07WUFDaEQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsa0RBQWtELEVBQUUsRUFBRSxFQUFFLENBQUMsS0FBVSxFQUFFLE1BQVc7Z0JBQ2pHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLGtEQUFrRCxDQUFDLENBQUE7Z0JBQzNFLE9BQU8sRUFBRSxDQUFBO1lBQ2IsQ0FBQyxDQUFDLENBQUE7UUFDTixDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUM7Q0FFSjtBQUVELGtCQUFlLGlCQUFpQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgRXZlbnRFbWl0dGVyIGZyb20gJ2V2ZW50cydcbmltcG9ydCBEZWJ1Z2dlckVycm9yIGZyb20gJy4vRGVidWdnZXJFcnJvcidcblxubW9kdWxlIERldmljZU9yaWVudGF0aW9uIHtcbiAgICAvKioqKioqKioqKioqKioqXG4gICAgICoqKiogVHlwZXMgKioqKlxuICAgICAqKioqKioqKioqKioqKi9cblxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgICoqKiogQ29tbWFuZCBQYXJhbWV0ZXJzICoqKipcbiAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICAgIGV4cG9ydCBtb2R1bGUgUGFyYW1zIHtcbiAgICAgICAgLyoqIEBleHBlcmltZW50YWwgKi9cbiAgICAgICAgZXhwb3J0IHR5cGUgc2V0RGV2aWNlT3JpZW50YXRpb25PdmVycmlkZSA9IHtcbiAgICAgICAgICAgIC8qKiBNb2NrIGFscGhhICovXG4gICAgICAgICAgICBhbHBoYTogbnVtYmVyXG5cbiAgICAgICAgICAgIC8qKiBNb2NrIGJldGEgKi9cbiAgICAgICAgICAgIGJldGE6IG51bWJlclxuXG4gICAgICAgICAgICAvKiogTW9jayBnYW1tYSAqL1xuICAgICAgICAgICAgZ2FtbWE6IG51bWJlclxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICAqKioqIENvbW1hbmQgUmVzdWx0ICoqKipcbiAgICAgKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgKioqKiBFdmVudCBQYXJhbWV0ZXJzICoqKipcbiAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxufVxuXG4vKipcbiAqIE5vIGRlc2NyaXB0aW9uXG4gKiBAZXhwZXJpbWVudGFsXG4gKi9cbmNsYXNzIERldmljZU9yaWVudGF0aW9uIHtcbiAgICBwcml2YXRlIGV2ZW50cyA9IG5ldyBFdmVudEVtaXR0ZXIoKVxuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBkYmc6IGFueSAvKiBFbGVjdHJvbi5EZWJ1Z2dlciovICkge1xuXG4gICAgICAgIGlmICghdGhpcy5kYmcuaXNBdHRhY2hlZCgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBjcmVhdGUgRGV2aWNlT3JpZW50YXRpb24gRG9tYWluIENsYXNzIGJlY2F1c2UgdGhlIGRlYnVnZ2VyIGlzIG5vdCBhdHRhY2hlZC5gKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIG9uKGV2ZW50OiBzdHJpbmcsIGxpc3RlbmVyOiBGdW5jdGlvbikge1xuICAgICAgICB0aGlzLmV2ZW50cy5vbihldmVudCwgbGlzdGVuZXIpXG4gICAgfVxuXG4gICAgcHVibGljIG9uY2UoZXZlbnQ6IHN0cmluZywgbGlzdGVuZXI6IEZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzLm9uKGV2ZW50LCBsaXN0ZW5lcilcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzc2VydEVycm9yKGVycm9yOiBhbnksIGNvbW1hbmROYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKCdtZXNzYWdlJyBpbiBlcnJvciAmJiAnY29kZScgaW4gZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBEZWJ1Z2dlckVycm9yKGVycm9yLm1lc3NhZ2UsIGVycm9yLmNvZGUsIGNvbW1hbmROYW1lKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqIE92ZXJyaWRlcyB0aGUgRGV2aWNlIE9yaWVudGF0aW9uLiAqL1xuICAgIHB1YmxpYyBhc3luYyBzZXREZXZpY2VPcmllbnRhdGlvbk92ZXJyaWRlKHBhcmFtczogRGV2aWNlT3JpZW50YXRpb24uUGFyYW1zLnNldERldmljZU9yaWVudGF0aW9uT3ZlcnJpZGUpOiBQcm9taXNlPHVuZGVmaW5lZD57XG4gICAgICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZTx1bmRlZmluZWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGJnLnNlbmRDb21tYW5kKCdEZXZpY2VPcmllbnRhdGlvbi5zZXREZXZpY2VPcmllbnRhdGlvbk92ZXJyaWRlJywgcGFyYW1zLCAoZXJyb3I6IGFueSwgcmVzdWx0OiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmFzc2VydEVycm9yKGVycm9yLCAnRGV2aWNlT3JpZW50YXRpb24uc2V0RGV2aWNlT3JpZW50YXRpb25PdmVycmlkZScpXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIC8qKiBDbGVhcnMgdGhlIG92ZXJyaWRkZW4gRGV2aWNlIE9yaWVudGF0aW9uLiAqL1xuICAgIHB1YmxpYyBhc3luYyBjbGVhckRldmljZU9yaWVudGF0aW9uT3ZlcnJpZGUoKTogUHJvbWlzZTx1bmRlZmluZWQ+e1xuICAgICAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2U8dW5kZWZpbmVkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRiZy5zZW5kQ29tbWFuZCgnRGV2aWNlT3JpZW50YXRpb24uY2xlYXJEZXZpY2VPcmllbnRhdGlvbk92ZXJyaWRlJywge30sIChlcnJvcjogYW55LCByZXN1bHQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYXNzZXJ0RXJyb3IoZXJyb3IsICdEZXZpY2VPcmllbnRhdGlvbi5jbGVhckRldmljZU9yaWVudGF0aW9uT3ZlcnJpZGUnKVxuICAgICAgICAgICAgICAgIHJlc29sdmUoKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgRGV2aWNlT3JpZW50YXRpb24iXX0=