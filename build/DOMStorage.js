"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const DebuggerError_1 = require("./DebuggerError");
/**
 * Query and modify DOM storage.
 * @experimental
 */
class DOMStorage {
    constructor(dbg /* Electron.Debugger*/) {
        this.dbg = dbg; /* Electron.Debugger*/
        this.events = new EventEmitter();
        this.dbg.on('message', (event, method, params) => {
            const [domain, domainMethod] = method.split('.');
            this.events.emit(domainMethod, params);
        });
        if (!this.dbg.isAttached()) {
            throw new Error(`Cannot create DOMStorage Domain Class because the debugger is not attached.`);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.on(event, listener);
    }
    assertError(error, commandName) {
        if ('message' in error && 'code' in error) {
            throw new DebuggerError_1.default(error.message, error.code, commandName);
        }
    }
    /** Enables storage tracking, storage events will now be delivered to the client. */
    async enable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOMStorage.enable', {}, (error, result) => {
                this.assertError(error, 'DOMStorage.enable');
                resolve();
            });
        });
    }
    /** Disables storage tracking, prevents storage events from being sent to the client. */
    async disable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOMStorage.disable', {}, (error, result) => {
                this.assertError(error, 'DOMStorage.disable');
                resolve();
            });
        });
    }
    /** No description */
    async clear(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOMStorage.clear', params, (error, result) => {
                this.assertError(error, 'DOMStorage.clear');
                resolve();
            });
        });
    }
    /** No description */
    async getDOMStorageItems(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOMStorage.getDOMStorageItems', params, (error, result) => {
                this.assertError(error, 'DOMStorage.getDOMStorageItems');
                resolve(result);
            });
        });
    }
    /** No description */
    async setDOMStorageItem(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOMStorage.setDOMStorageItem', params, (error, result) => {
                this.assertError(error, 'DOMStorage.setDOMStorageItem');
                resolve();
            });
        });
    }
    /** No description */
    async removeDOMStorageItem(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOMStorage.removeDOMStorageItem', params, (error, result) => {
                this.assertError(error, 'DOMStorage.removeDOMStorageItem');
                resolve();
            });
        });
    }
}
exports.default = DOMStorage;
//# sourceMappingURL=data:application/json;base64,