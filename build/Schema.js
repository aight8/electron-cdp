"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const DebuggerError_1 = require("./DebuggerError");
/**
 * Provides information about the protocol schema.
 */
class Schema {
    constructor(dbg /* Electron.Debugger*/) {
        this.dbg = dbg; /* Electron.Debugger*/
        this.events = new EventEmitter();
        if (!this.dbg.isAttached()) {
            throw new Error(`Cannot create Schema Domain Class because the debugger is not attached.`);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.on(event, listener);
    }
    assertError(error, commandName) {
        if ('message' in error && 'code' in error) {
            throw new DebuggerError_1.default(error.message, error.code, commandName);
        }
    }
    /** Returns supported domains. */
    async getDomains() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Schema.getDomains', {}, (error, result) => {
                this.assertError(error, 'Schema.getDomains');
                resolve(result);
            });
        });
    }
}
exports.default = Schema;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2NoZW1hLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vZ2VuZXJhdGVkLXRzL1NjaGVtYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVDQUFzQztBQUN0QyxtREFBMkM7QUF3QzNDOztHQUVHO0FBQ0g7SUFHSSxZQUE2QixHQUFRLENBQUMsc0JBQXNCO1FBQS9CLFFBQUcsR0FBSCxHQUFHLENBQUssQ0FBQyxzQkFBc0I7UUFGcEQsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUE7UUFJL0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN6QixNQUFNLElBQUksS0FBSyxDQUFDLHlFQUF5RSxDQUFDLENBQUE7UUFDOUYsQ0FBQztJQUNMLENBQUM7SUFFTSxFQUFFLENBQUMsS0FBYSxFQUFFLFFBQWtCO1FBQ3ZDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUNuQyxDQUFDO0lBRU0sSUFBSSxDQUFDLEtBQWEsRUFBRSxRQUFrQjtRQUN6QyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDbkMsQ0FBQztJQUVPLFdBQVcsQ0FBQyxLQUFVLEVBQUUsV0FBbUI7UUFDL0MsRUFBRSxDQUFDLENBQUMsU0FBUyxJQUFJLEtBQUssSUFBSSxNQUFNLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQztZQUN4QyxNQUFNLElBQUksdUJBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUE7UUFDbkUsQ0FBQztJQUNMLENBQUM7SUFFRCxpQ0FBaUM7SUFDMUIsS0FBSyxDQUFDLFVBQVU7UUFDbkIsTUFBTSxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQTJCLENBQUMsT0FBTyxFQUFFLE1BQU07WUFDL0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsbUJBQW1CLEVBQUUsRUFBRSxFQUFFLENBQUMsS0FBVSxFQUFFLE1BQVc7Z0JBQ2xFLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLG1CQUFtQixDQUFDLENBQUE7Z0JBQzVDLE9BQU8sQ0FBQyxNQUFrQyxDQUFDLENBQUE7WUFDL0MsQ0FBQyxDQUFDLENBQUE7UUFDTixDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUM7Q0FFSjtBQUVELGtCQUFlLE1BQU0sQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEV2ZW50RW1pdHRlciBmcm9tICdldmVudHMnXG5pbXBvcnQgRGVidWdnZXJFcnJvciBmcm9tICcuL0RlYnVnZ2VyRXJyb3InXG5cbm1vZHVsZSBTY2hlbWEge1xuICAgIC8qKioqKioqKioqKioqKipcbiAgICAgKioqKiBUeXBlcyAqKioqXG4gICAgICoqKioqKioqKioqKioqL1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb24gb2YgdGhlIHByb3RvY29sIGRvbWFpbi5cbiAgICAgKiBAZXhwZXJpbWVudGFsXG4gICAgICovXG4gICAgZXhwb3J0IHR5cGUgRG9tYWluID0ge1xuICAgICAgICAvKiogRG9tYWluIG5hbWUuICovXG4gICAgICAgIG5hbWU6IHN0cmluZ1xuXG4gICAgICAgIC8qKiBEb21haW4gdmVyc2lvbi4gKi9cbiAgICAgICAgdmVyc2lvbjogc3RyaW5nXG4gICAgfVxuXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgKioqKiBDb21tYW5kIFBhcmFtZXRlcnMgKioqKlxuICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgICoqKiogQ29tbWFuZCBSZXN1bHQgKioqKlxuICAgICAqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICBleHBvcnQgbW9kdWxlIFJlc3VsdCB7XG4gICAgICAgIC8qKiBAZXhwZXJpbWVudGFsICovXG4gICAgICAgIGV4cG9ydCB0eXBlIGdldERvbWFpbnMgPSB7XG4gICAgICAgICAgICAvKiogTGlzdCBvZiBzdXBwb3J0ZWQgZG9tYWlucy4gKi9cbiAgICAgICAgICAgIGRvbWFpbnM6IERvbWFpbltdXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgKioqKiBFdmVudCBQYXJhbWV0ZXJzICoqKipcbiAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxufVxuXG4vKipcbiAqIFByb3ZpZGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBwcm90b2NvbCBzY2hlbWEuXG4gKi9cbmNsYXNzIFNjaGVtYSB7XG4gICAgcHJpdmF0ZSBldmVudHMgPSBuZXcgRXZlbnRFbWl0dGVyKClcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZGJnOiBhbnkgLyogRWxlY3Ryb24uRGVidWdnZXIqLyApIHtcblxuICAgICAgICBpZiAoIXRoaXMuZGJnLmlzQXR0YWNoZWQoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgY3JlYXRlIFNjaGVtYSBEb21haW4gQ2xhc3MgYmVjYXVzZSB0aGUgZGVidWdnZXIgaXMgbm90IGF0dGFjaGVkLmApXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgb24oZXZlbnQ6IHN0cmluZywgbGlzdGVuZXI6IEZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzLm9uKGV2ZW50LCBsaXN0ZW5lcilcbiAgICB9XG5cbiAgICBwdWJsaWMgb25jZShldmVudDogc3RyaW5nLCBsaXN0ZW5lcjogRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5ldmVudHMub24oZXZlbnQsIGxpc3RlbmVyKVxuICAgIH1cblxuICAgIHByaXZhdGUgYXNzZXJ0RXJyb3IoZXJyb3I6IGFueSwgY29tbWFuZE5hbWU6IHN0cmluZykge1xuICAgICAgICBpZiAoJ21lc3NhZ2UnIGluIGVycm9yICYmICdjb2RlJyBpbiBlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IERlYnVnZ2VyRXJyb3IoZXJyb3IubWVzc2FnZSwgZXJyb3IuY29kZSwgY29tbWFuZE5hbWUpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogUmV0dXJucyBzdXBwb3J0ZWQgZG9tYWlucy4gKi9cbiAgICBwdWJsaWMgYXN5bmMgZ2V0RG9tYWlucygpOiBQcm9taXNlPFNjaGVtYS5SZXN1bHQuZ2V0RG9tYWlucz57XG4gICAgICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZTxTY2hlbWEuUmVzdWx0LmdldERvbWFpbnM+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGJnLnNlbmRDb21tYW5kKCdTY2hlbWEuZ2V0RG9tYWlucycsIHt9LCAoZXJyb3I6IGFueSwgcmVzdWx0OiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmFzc2VydEVycm9yKGVycm9yLCAnU2NoZW1hLmdldERvbWFpbnMnKVxuICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0IGFzIFNjaGVtYS5SZXN1bHQuZ2V0RG9tYWlucylcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNjaGVtYSJdfQ==