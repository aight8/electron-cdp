"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const DebuggerError_1 = require("./DebuggerError");
/**
 * No description
 * @experimental
 */
class Storage {
    constructor(dbg /* Electron.Debugger*/) {
        this.dbg = dbg; /* Electron.Debugger*/
        this.events = new EventEmitter();
        if (!this.dbg.isAttached()) {
            throw new Error(`Cannot create Storage Domain Class because the debugger is not attached.`);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.on(event, listener);
    }
    assertError(error, commandName) {
        if ('message' in error && 'code' in error) {
            throw new DebuggerError_1.default(error.message, error.code, commandName);
        }
    }
    /** Clears storage for origin. */
    async clearDataForOrigin(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Storage.clearDataForOrigin', params, (error, result) => {
                this.assertError(error, 'Storage.clearDataForOrigin');
                resolve();
            });
        });
    }
}
exports.default = Storage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RvcmFnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL2dlbmVyYXRlZC10cy9TdG9yYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdUNBQXNDO0FBQ3RDLG1EQUEyQztBQXNDM0M7OztHQUdHO0FBQ0g7SUFHSSxZQUE2QixHQUFRLENBQUMsc0JBQXNCO1FBQS9CLFFBQUcsR0FBSCxHQUFHLENBQUssQ0FBQyxzQkFBc0I7UUFGcEQsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUE7UUFJL0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN6QixNQUFNLElBQUksS0FBSyxDQUFDLDBFQUEwRSxDQUFDLENBQUE7UUFDL0YsQ0FBQztJQUNMLENBQUM7SUFFTSxFQUFFLENBQUMsS0FBYSxFQUFFLFFBQWtCO1FBQ3ZDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUNuQyxDQUFDO0lBRU0sSUFBSSxDQUFDLEtBQWEsRUFBRSxRQUFrQjtRQUN6QyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDbkMsQ0FBQztJQUVPLFdBQVcsQ0FBQyxLQUFVLEVBQUUsV0FBbUI7UUFDL0MsRUFBRSxDQUFDLENBQUMsU0FBUyxJQUFJLEtBQUssSUFBSSxNQUFNLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQztZQUN4QyxNQUFNLElBQUksdUJBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUE7UUFDbkUsQ0FBQztJQUNMLENBQUM7SUFFRCxpQ0FBaUM7SUFDMUIsS0FBSyxDQUFDLGtCQUFrQixDQUFDLE1BQXlDO1FBQ3JFLE1BQU0sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFZLENBQUMsT0FBTyxFQUFFLE1BQU07WUFDaEQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsNEJBQTRCLEVBQUUsTUFBTSxFQUFFLENBQUMsS0FBVSxFQUFFLE1BQVc7Z0JBQy9FLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLDRCQUE0QixDQUFDLENBQUE7Z0JBQ3JELE9BQU8sRUFBRSxDQUFBO1lBQ2IsQ0FBQyxDQUFDLENBQUE7UUFDTixDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUM7Q0FFSjtBQUVELGtCQUFlLE9BQU8sQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEV2ZW50RW1pdHRlciBmcm9tICdldmVudHMnXG5pbXBvcnQgRGVidWdnZXJFcnJvciBmcm9tICcuL0RlYnVnZ2VyRXJyb3InXG5cbm1vZHVsZSBTdG9yYWdlIHtcbiAgICAvKioqKioqKioqKioqKioqXG4gICAgICoqKiogVHlwZXMgKioqKlxuICAgICAqKioqKioqKioqKioqKi9cblxuICAgIC8qKlxuICAgICAqIEVudW0gb2YgcG9zc2libGUgc3RvcmFnZSB0eXBlcy5cbiAgICAgKiBAZXhwZXJpbWVudGFsXG4gICAgICovXG4gICAgZXhwb3J0IHR5cGUgU3RvcmFnZVR5cGUgPSAnYXBwY2FjaGUnIHwgJ2Nvb2tpZXMnIHwgJ2ZpbGVfc3lzdGVtcycgfCAnaW5kZXhlZGRiJyB8ICdsb2NhbF9zdG9yYWdlJyB8ICdzaGFkZXJfY2FjaGUnIHwgJ3dlYnNxbCcgfCAnc2VydmljZV93b3JrZXJzJyB8XG4gICAgICAgICdjYWNoZV9zdG9yYWdlJyB8ICdhbGwnXG5cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICAqKioqIENvbW1hbmQgUGFyYW1ldGVycyAqKioqXG4gICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICBleHBvcnQgbW9kdWxlIFBhcmFtcyB7XG4gICAgICAgIC8qKiBAZXhwZXJpbWVudGFsICovXG4gICAgICAgIGV4cG9ydCB0eXBlIGNsZWFyRGF0YUZvck9yaWdpbiA9IHtcbiAgICAgICAgICAgIC8qKiBTZWN1cml0eSBvcmlnaW4uICovXG4gICAgICAgICAgICBvcmlnaW46IHN0cmluZ1xuXG4gICAgICAgICAgICAvKiogQ29tbWEgc2VwYXJhdGVkIG9yaWdpbiBuYW1lcy4gKi9cbiAgICAgICAgICAgIHN0b3JhZ2VUeXBlczogc3RyaW5nXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgICoqKiogQ29tbWFuZCBSZXN1bHQgKioqKlxuICAgICAqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICAqKioqIEV2ZW50IFBhcmFtZXRlcnMgKioqKlxuICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG59XG5cbi8qKlxuICogTm8gZGVzY3JpcHRpb25cbiAqIEBleHBlcmltZW50YWxcbiAqL1xuY2xhc3MgU3RvcmFnZSB7XG4gICAgcHJpdmF0ZSBldmVudHMgPSBuZXcgRXZlbnRFbWl0dGVyKClcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZGJnOiBhbnkgLyogRWxlY3Ryb24uRGVidWdnZXIqLyApIHtcblxuICAgICAgICBpZiAoIXRoaXMuZGJnLmlzQXR0YWNoZWQoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgY3JlYXRlIFN0b3JhZ2UgRG9tYWluIENsYXNzIGJlY2F1c2UgdGhlIGRlYnVnZ2VyIGlzIG5vdCBhdHRhY2hlZC5gKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIG9uKGV2ZW50OiBzdHJpbmcsIGxpc3RlbmVyOiBGdW5jdGlvbikge1xuICAgICAgICB0aGlzLmV2ZW50cy5vbihldmVudCwgbGlzdGVuZXIpXG4gICAgfVxuXG4gICAgcHVibGljIG9uY2UoZXZlbnQ6IHN0cmluZywgbGlzdGVuZXI6IEZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzLm9uKGV2ZW50LCBsaXN0ZW5lcilcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzc2VydEVycm9yKGVycm9yOiBhbnksIGNvbW1hbmROYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKCdtZXNzYWdlJyBpbiBlcnJvciAmJiAnY29kZScgaW4gZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBEZWJ1Z2dlckVycm9yKGVycm9yLm1lc3NhZ2UsIGVycm9yLmNvZGUsIGNvbW1hbmROYW1lKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqIENsZWFycyBzdG9yYWdlIGZvciBvcmlnaW4uICovXG4gICAgcHVibGljIGFzeW5jIGNsZWFyRGF0YUZvck9yaWdpbihwYXJhbXM6IFN0b3JhZ2UuUGFyYW1zLmNsZWFyRGF0YUZvck9yaWdpbik6IFByb21pc2U8dW5kZWZpbmVkPntcbiAgICAgICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlPHVuZGVmaW5lZD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kYmcuc2VuZENvbW1hbmQoJ1N0b3JhZ2UuY2xlYXJEYXRhRm9yT3JpZ2luJywgcGFyYW1zLCAoZXJyb3I6IGFueSwgcmVzdWx0OiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmFzc2VydEVycm9yKGVycm9yLCAnU3RvcmFnZS5jbGVhckRhdGFGb3JPcmlnaW4nKVxuICAgICAgICAgICAgICAgIHJlc29sdmUoKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgU3RvcmFnZSJdfQ==