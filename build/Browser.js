"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const DebuggerError_1 = require("./DebuggerError");
/**
 * The Browser domain defines methods and events for browser managing.
 * @experimental
 */
class Browser {
    constructor(dbg /* Electron.Debugger*/) {
        this.dbg = dbg; /* Electron.Debugger*/
        this.events = new EventEmitter();
        if (!this.dbg.isAttached()) {
            throw new Error(`Cannot create Browser Domain Class because the debugger is not attached.`);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.on(event, listener);
    }
    assertError(error, commandName) {
        if ('message' in error && 'code' in error) {
            throw new DebuggerError_1.default(error.message, error.code, commandName);
        }
    }
    /** Get the browser window that contains the devtools target. */
    async getWindowForTarget(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Browser.getWindowForTarget', params, (error, result) => {
                this.assertError(error, 'Browser.getWindowForTarget');
                resolve(result);
            });
        });
    }
    /** Set position and/or size of the browser window. */
    async setWindowBounds(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Browser.setWindowBounds', params, (error, result) => {
                this.assertError(error, 'Browser.setWindowBounds');
                resolve();
            });
        });
    }
    /** Get position and size of the browser window. */
    async getWindowBounds(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Browser.getWindowBounds', params, (error, result) => {
                this.assertError(error, 'Browser.getWindowBounds');
                resolve(result);
            });
        });
    }
}
exports.default = Browser;
//# sourceMappingURL=data:application/json;base64,