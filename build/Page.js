"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const DebuggerError_1 = require("./DebuggerError");
/**
 * Actions and events related to the inspected page belong to the page domain.
 */
class Page {
    constructor(dbg /* Electron.Debugger*/) {
        this.dbg = dbg; /* Electron.Debugger*/
        this.events = new EventEmitter();
        this.dbg.on('message', (event, method, params) => {
            const [domain, domainMethod] = method.split('.');
            this.events.emit(domainMethod, params);
        });
        if (!this.dbg.isAttached()) {
            throw new Error(`Cannot create Page Domain Class because the debugger is not attached.`);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.on(event, listener);
    }
    assertError(error, commandName) {
        if ('message' in error && 'code' in error) {
            throw new DebuggerError_1.default(error.message, error.code, commandName);
        }
    }
    /** Enables page domain notifications. */
    async enable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.enable', {}, (error, result) => {
                this.assertError(error, 'Page.enable');
                resolve();
            });
        });
    }
    /** Disables page domain notifications. */
    async disable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.disable', {}, (error, result) => {
                this.assertError(error, 'Page.disable');
                resolve();
            });
        });
    }
    /**
     * No description
     * @experimental
     */
    async addScriptToEvaluateOnLoad(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.addScriptToEvaluateOnLoad', params, (error, result) => {
                this.assertError(error, 'Page.addScriptToEvaluateOnLoad');
                resolve(result);
            });
        });
    }
    /**
     * No description
     * @experimental
     */
    async removeScriptToEvaluateOnLoad(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.removeScriptToEvaluateOnLoad', params, (error, result) => {
                this.assertError(error, 'Page.removeScriptToEvaluateOnLoad');
                resolve();
            });
        });
    }
    /**
     * Controls whether browser will open a new inspector window for connected pages.
     * @experimental
     */
    async setAutoAttachToCreatedPages(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.setAutoAttachToCreatedPages', params, (error, result) => {
                this.assertError(error, 'Page.setAutoAttachToCreatedPages');
                resolve();
            });
        });
    }
    /** Reloads given page optionally ignoring the cache. */
    async reload(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.reload', params || {}, (error, result) => {
                this.assertError(error, 'Page.reload');
                resolve();
            });
        });
    }
    /** Navigates current page to the given URL. */
    async navigate(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.navigate', params, (error, result) => {
                this.assertError(error, 'Page.navigate');
                resolve(result);
            });
        });
    }
    /**
     * Force the page stop all navigations and pending resource fetches.
     * @experimental
     */
    async stopLoading() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.stopLoading', {}, (error, result) => {
                this.assertError(error, 'Page.stopLoading');
                resolve();
            });
        });
    }
    /**
     * Returns navigation history for the current page.
     * @experimental
     */
    async getNavigationHistory() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.getNavigationHistory', {}, (error, result) => {
                this.assertError(error, 'Page.getNavigationHistory');
                resolve(result);
            });
        });
    }
    /**
     * Navigates current page to the given history entry.
     * @experimental
     */
    async navigateToHistoryEntry(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.navigateToHistoryEntry', params, (error, result) => {
                this.assertError(error, 'Page.navigateToHistoryEntry');
                resolve();
            });
        });
    }
    /**
     * Returns all browser cookies. Depending on the backend support, will return detailed cookie information in the <code>cookies</code> field.
     * @experimental
     */
    async getCookies() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.getCookies', {}, (error, result) => {
                this.assertError(error, 'Page.getCookies');
                resolve(result);
            });
        });
    }
    /**
     * Deletes browser cookie with given name, domain and path.
     * @experimental
     */
    async deleteCookie(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.deleteCookie', params, (error, result) => {
                this.assertError(error, 'Page.deleteCookie');
                resolve();
            });
        });
    }
    /**
     * Returns present frame / resource tree structure.
     * @experimental
     */
    async getResourceTree() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.getResourceTree', {}, (error, result) => {
                this.assertError(error, 'Page.getResourceTree');
                resolve(result);
            });
        });
    }
    /**
     * Returns content of the given resource.
     * @experimental
     */
    async getResourceContent(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.getResourceContent', params, (error, result) => {
                this.assertError(error, 'Page.getResourceContent');
                resolve(result);
            });
        });
    }
    /**
     * Searches for given string in resource content.
     * @experimental
     */
    async searchInResource(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.searchInResource', params, (error, result) => {
                this.assertError(error, 'Page.searchInResource');
                resolve(result);
            });
        });
    }
    /**
     * Sets given markup as the document's HTML.
     * @experimental
     */
    async setDocumentContent(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.setDocumentContent', params, (error, result) => {
                this.assertError(error, 'Page.setDocumentContent');
                resolve();
            });
        });
    }
    /**
     * Overrides the values of device screen dimensions (window.screen.width, window.screen.height, window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media query results).
     * @experimental
     */
    async setDeviceMetricsOverride(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.setDeviceMetricsOverride', params, (error, result) => {
                this.assertError(error, 'Page.setDeviceMetricsOverride');
                resolve();
            });
        });
    }
    /**
     * Clears the overriden device metrics.
     * @experimental
     */
    async clearDeviceMetricsOverride() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.clearDeviceMetricsOverride', {}, (error, result) => {
                this.assertError(error, 'Page.clearDeviceMetricsOverride');
                resolve();
            });
        });
    }
    /** Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position unavailable. */
    async setGeolocationOverride(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.setGeolocationOverride', params || {}, (error, result) => {
                this.assertError(error, 'Page.setGeolocationOverride');
                resolve();
            });
        });
    }
    /** Clears the overriden Geolocation Position and Error. */
    async clearGeolocationOverride() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.clearGeolocationOverride', {}, (error, result) => {
                this.assertError(error, 'Page.clearGeolocationOverride');
                resolve();
            });
        });
    }
    /**
     * Overrides the Device Orientation.
     * @experimental
     */
    async setDeviceOrientationOverride(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.setDeviceOrientationOverride', params, (error, result) => {
                this.assertError(error, 'Page.setDeviceOrientationOverride');
                resolve();
            });
        });
    }
    /**
     * Clears the overridden Device Orientation.
     * @experimental
     */
    async clearDeviceOrientationOverride() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.clearDeviceOrientationOverride', {}, (error, result) => {
                this.assertError(error, 'Page.clearDeviceOrientationOverride');
                resolve();
            });
        });
    }
    /**
     * Toggles mouse event-based touch event emulation.
     * @experimental
     */
    async setTouchEmulationEnabled(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.setTouchEmulationEnabled', params, (error, result) => {
                this.assertError(error, 'Page.setTouchEmulationEnabled');
                resolve();
            });
        });
    }
    /**
     * Capture page screenshot.
     * @experimental
     */
    async captureScreenshot(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.captureScreenshot', params || {}, (error, result) => {
                this.assertError(error, 'Page.captureScreenshot');
                resolve(result);
            });
        });
    }
    /**
     * Print page as PDF.
     * @experimental
     */
    async printToPDF(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.printToPDF', params || {}, (error, result) => {
                this.assertError(error, 'Page.printToPDF');
                resolve(result);
            });
        });
    }
    /**
     * Starts sending each frame using the <code>screencastFrame</code> event.
     * @experimental
     */
    async startScreencast(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.startScreencast', params || {}, (error, result) => {
                this.assertError(error, 'Page.startScreencast');
                resolve();
            });
        });
    }
    /**
     * Stops sending each frame in the <code>screencastFrame</code>.
     * @experimental
     */
    async stopScreencast() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.stopScreencast', {}, (error, result) => {
                this.assertError(error, 'Page.stopScreencast');
                resolve();
            });
        });
    }
    /**
     * Acknowledges that a screencast frame has been received by the frontend.
     * @experimental
     */
    async screencastFrameAck(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.screencastFrameAck', params, (error, result) => {
                this.assertError(error, 'Page.screencastFrameAck');
                resolve();
            });
        });
    }
    /** Accepts or dismisses a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload). */
    async handleJavaScriptDialog(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.handleJavaScriptDialog', params, (error, result) => {
                this.assertError(error, 'Page.handleJavaScriptDialog');
                resolve();
            });
        });
    }
    /**
     * No description
     * @experimental
     */
    async getAppManifest() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.getAppManifest', {}, (error, result) => {
                this.assertError(error, 'Page.getAppManifest');
                resolve(result);
            });
        });
    }
    /**
     * No description
     * @experimental
     */
    async requestAppBanner() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.requestAppBanner', {}, (error, result) => {
                this.assertError(error, 'Page.requestAppBanner');
                resolve();
            });
        });
    }
    /**
     * Toggles navigation throttling which allows programatic control over navigation and redirect response.
     * @experimental
     */
    async setControlNavigations(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.setControlNavigations', params, (error, result) => {
                this.assertError(error, 'Page.setControlNavigations');
                resolve();
            });
        });
    }
    /**
     * Should be sent in response to a navigationRequested or a redirectRequested event, telling the browser how to handle the navigation.
     * @experimental
     */
    async processNavigation(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.processNavigation', params, (error, result) => {
                this.assertError(error, 'Page.processNavigation');
                resolve();
            });
        });
    }
    /**
     * Returns metrics relating to the layouting of the page, such as viewport bounds/scale.
     * @experimental
     */
    async getLayoutMetrics() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.getLayoutMetrics', {}, (error, result) => {
                this.assertError(error, 'Page.getLayoutMetrics');
                resolve(result);
            });
        });
    }
    /**
     * Creates an isolated world for the given frame.
     * @experimental
     */
    async createIsolatedWorld(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Page.createIsolatedWorld', params, (error, result) => {
                this.assertError(error, 'Page.createIsolatedWorld');
                resolve();
            });
        });
    }
}
exports.default = Page;
//# sourceMappingURL=data:application/json;base64,