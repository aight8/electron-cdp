"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Schema_1 = require("./Schema");
exports.Schema = Schema_1.default;
const Runtime_1 = require("./Runtime");
exports.Runtime = Runtime_1.default;
const Debugger_1 = require("./Debugger");
exports.Debugger = Debugger_1.default;
const Console_1 = require("./Console");
exports.Console = Console_1.default;
const Profiler_1 = require("./Profiler");
exports.Profiler = Profiler_1.default;
const HeapProfiler_1 = require("./HeapProfiler");
exports.HeapProfiler = HeapProfiler_1.default;
const Inspector_1 = require("./Inspector");
exports.Inspector = Inspector_1.default;
const Memory_1 = require("./Memory");
exports.Memory = Memory_1.default;
const Page_1 = require("./Page");
exports.Page = Page_1.default;
const Overlay_1 = require("./Overlay");
exports.Overlay = Overlay_1.default;
const Emulation_1 = require("./Emulation");
exports.Emulation = Emulation_1.default;
const Security_1 = require("./Security");
exports.Security = Security_1.default;
const Network_1 = require("./Network");
exports.Network = Network_1.default;
const Database_1 = require("./Database");
exports.Database = Database_1.default;
const IndexedDB_1 = require("./IndexedDB");
exports.IndexedDB = IndexedDB_1.default;
const CacheStorage_1 = require("./CacheStorage");
exports.CacheStorage = CacheStorage_1.default;
const DOMStorage_1 = require("./DOMStorage");
exports.DOMStorage = DOMStorage_1.default;
const ApplicationCache_1 = require("./ApplicationCache");
exports.ApplicationCache = ApplicationCache_1.default;
const DOM_1 = require("./DOM");
exports.DOM = DOM_1.default;
const CSS_1 = require("./CSS");
exports.CSS = CSS_1.default;
const IO_1 = require("./IO");
exports.IO = IO_1.default;
const DOMDebugger_1 = require("./DOMDebugger");
exports.DOMDebugger = DOMDebugger_1.default;
const Target_1 = require("./Target");
exports.Target = Target_1.default;
const ServiceWorker_1 = require("./ServiceWorker");
exports.ServiceWorker = ServiceWorker_1.default;
const Input_1 = require("./Input");
exports.Input = Input_1.default;
const LayerTree_1 = require("./LayerTree");
exports.LayerTree = LayerTree_1.default;
const DeviceOrientation_1 = require("./DeviceOrientation");
exports.DeviceOrientation = DeviceOrientation_1.default;
const Tracing_1 = require("./Tracing");
exports.Tracing = Tracing_1.default;
const Animation_1 = require("./Animation");
exports.Animation = Animation_1.default;
const Accessibility_1 = require("./Accessibility");
exports.Accessibility = Accessibility_1.default;
const Storage_1 = require("./Storage");
exports.Storage = Storage_1.default;
const Log_1 = require("./Log");
exports.Log = Log_1.default;
const SystemInfo_1 = require("./SystemInfo");
exports.SystemInfo = SystemInfo_1.default;
const Tethering_1 = require("./Tethering");
exports.Tethering = Tethering_1.default;
const Browser_1 = require("./Browser");
exports.Browser = Browser_1.default;
class CDP {
    constructor(dbg) {
        this.dbg = dbg;
        if (!this.dbg.isAttached()) {
            this.dbg.attach();
        }
        this.returnOrCreateDomainClass = this.returnOrCreateDomainClass.bind(this);
    }
    returnOrCreateDomainClass(domainClass) {
        const domainObjectProperty = '_' + domainClass.name;
        if (!this[domainObjectProperty]) {
            this[domainObjectProperty] = new domainClass(this.dbg);
        }
        return this[domainObjectProperty];
    }
    get Schema() {
        return this.returnOrCreateDomainClass(Schema_1.default);
    }
    get Runtime() {
        return this.returnOrCreateDomainClass(Runtime_1.default);
    }
    get Debugger() {
        return this.returnOrCreateDomainClass(Debugger_1.default);
    }
    get Console() {
        return this.returnOrCreateDomainClass(Console_1.default);
    }
    get Profiler() {
        return this.returnOrCreateDomainClass(Profiler_1.default);
    }
    get HeapProfiler() {
        return this.returnOrCreateDomainClass(HeapProfiler_1.default);
    }
    get Inspector() {
        return this.returnOrCreateDomainClass(Inspector_1.default);
    }
    get Memory() {
        return this.returnOrCreateDomainClass(Memory_1.default);
    }
    get Page() {
        return this.returnOrCreateDomainClass(Page_1.default);
    }
    get Overlay() {
        return this.returnOrCreateDomainClass(Overlay_1.default);
    }
    get Emulation() {
        return this.returnOrCreateDomainClass(Emulation_1.default);
    }
    get Security() {
        return this.returnOrCreateDomainClass(Security_1.default);
    }
    get Network() {
        return this.returnOrCreateDomainClass(Network_1.default);
    }
    get Database() {
        return this.returnOrCreateDomainClass(Database_1.default);
    }
    get IndexedDB() {
        return this.returnOrCreateDomainClass(IndexedDB_1.default);
    }
    get CacheStorage() {
        return this.returnOrCreateDomainClass(CacheStorage_1.default);
    }
    get DOMStorage() {
        return this.returnOrCreateDomainClass(DOMStorage_1.default);
    }
    get ApplicationCache() {
        return this.returnOrCreateDomainClass(ApplicationCache_1.default);
    }
    get DOM() {
        return this.returnOrCreateDomainClass(DOM_1.default);
    }
    get CSS() {
        return this.returnOrCreateDomainClass(CSS_1.default);
    }
    get IO() {
        return this.returnOrCreateDomainClass(IO_1.default);
    }
    get DOMDebugger() {
        return this.returnOrCreateDomainClass(DOMDebugger_1.default);
    }
    get Target() {
        return this.returnOrCreateDomainClass(Target_1.default);
    }
    get ServiceWorker() {
        return this.returnOrCreateDomainClass(ServiceWorker_1.default);
    }
    get Input() {
        return this.returnOrCreateDomainClass(Input_1.default);
    }
    get LayerTree() {
        return this.returnOrCreateDomainClass(LayerTree_1.default);
    }
    get DeviceOrientation() {
        return this.returnOrCreateDomainClass(DeviceOrientation_1.default);
    }
    get Tracing() {
        return this.returnOrCreateDomainClass(Tracing_1.default);
    }
    get Animation() {
        return this.returnOrCreateDomainClass(Animation_1.default);
    }
    get Accessibility() {
        return this.returnOrCreateDomainClass(Accessibility_1.default);
    }
    get Storage() {
        return this.returnOrCreateDomainClass(Storage_1.default);
    }
    get Log() {
        return this.returnOrCreateDomainClass(Log_1.default);
    }
    get SystemInfo() {
        return this.returnOrCreateDomainClass(SystemInfo_1.default);
    }
    get Tethering() {
        return this.returnOrCreateDomainClass(Tethering_1.default);
    }
    get Browser() {
        return this.returnOrCreateDomainClass(Browser_1.default);
    }
}
exports.default = CDP;
//# sourceMappingURL=data:application/json;base64,