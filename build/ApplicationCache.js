"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const DebuggerError_1 = require("./DebuggerError");
/**
 * No description
 * @experimental
 */
class ApplicationCache {
    constructor(dbg /* Electron.Debugger*/) {
        this.dbg = dbg; /* Electron.Debugger*/
        this.events = new EventEmitter();
        this.dbg.on('message', (event, method, params) => {
            const [domain, domainMethod] = method.split('.');
            this.events.emit(domainMethod, params);
        });
        if (!this.dbg.isAttached()) {
            throw new Error(`Cannot create ApplicationCache Domain Class because the debugger is not attached.`);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.on(event, listener);
    }
    assertError(error, commandName) {
        if ('message' in error && 'code' in error) {
            throw new DebuggerError_1.default(error.message, error.code, commandName);
        }
    }
    /** Returns array of frame identifiers with manifest urls for each frame containing a document associated with some application cache. */
    async getFramesWithManifests() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('ApplicationCache.getFramesWithManifests', {}, (error, result) => {
                this.assertError(error, 'ApplicationCache.getFramesWithManifests');
                resolve(result);
            });
        });
    }
    /** Enables application cache domain notifications. */
    async enable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('ApplicationCache.enable', {}, (error, result) => {
                this.assertError(error, 'ApplicationCache.enable');
                resolve();
            });
        });
    }
    /** Returns manifest URL for document in the given frame. */
    async getManifestForFrame(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('ApplicationCache.getManifestForFrame', params, (error, result) => {
                this.assertError(error, 'ApplicationCache.getManifestForFrame');
                resolve(result);
            });
        });
    }
    /** Returns relevant application cache data for the document in given frame. */
    async getApplicationCacheForFrame(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('ApplicationCache.getApplicationCacheForFrame', params, (error, result) => {
                this.assertError(error, 'ApplicationCache.getApplicationCacheForFrame');
                resolve(result);
            });
        });
    }
}
exports.default = ApplicationCache;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBwbGljYXRpb25DYWNoZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL2dlbmVyYXRlZC10cy9BcHBsaWNhdGlvbkNhY2hlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdUNBQXNDO0FBQ3RDLG1EQUEyQztBQXlJM0M7OztHQUdHO0FBQ0g7SUFHSSxZQUE2QixHQUFRLENBQUMsc0JBQXNCO1FBQS9CLFFBQUcsR0FBSCxHQUFHLENBQUssQ0FBQyxzQkFBc0I7UUFGcEQsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUE7UUFJL0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBVSxFQUFFLE1BQVcsRUFBRSxNQUFXO1lBQ3hELE1BQU0sQ0FBQyxNQUFNLEVBQUUsWUFBWSxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUNoRCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFDMUMsQ0FBQyxDQUFDLENBQUE7UUFFRixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQUMsbUZBQW1GLENBQUMsQ0FBQTtRQUN4RyxDQUFDO0lBQ0wsQ0FBQztJQUVNLEVBQUUsQ0FBQyxLQUFhLEVBQUUsUUFBa0I7UUFDdkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQ25DLENBQUM7SUFFTSxJQUFJLENBQUMsS0FBYSxFQUFFLFFBQWtCO1FBQ3pDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUNuQyxDQUFDO0lBRU8sV0FBVyxDQUFDLEtBQVUsRUFBRSxXQUFtQjtRQUMvQyxFQUFFLENBQUMsQ0FBQyxTQUFTLElBQUksS0FBSyxJQUFJLE1BQU0sSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLE1BQU0sSUFBSSx1QkFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQTtRQUNuRSxDQUFDO0lBQ0wsQ0FBQztJQUVELHlJQUF5STtJQUNsSSxLQUFLLENBQUMsc0JBQXNCO1FBQy9CLE1BQU0sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFpRCxDQUFDLE9BQU8sRUFBRSxNQUFNO1lBQ3JGLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLHlDQUF5QyxFQUFFLEVBQUUsRUFBRSxDQUFDLEtBQVUsRUFBRSxNQUFXO2dCQUN4RixJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSx5Q0FBeUMsQ0FBQyxDQUFBO2dCQUNsRSxPQUFPLENBQUMsTUFBd0QsQ0FBQyxDQUFBO1lBQ3JFLENBQUMsQ0FBQyxDQUFBO1FBQ04sQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0lBRUQsc0RBQXNEO0lBQy9DLEtBQUssQ0FBQyxNQUFNO1FBQ2YsTUFBTSxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQVksQ0FBQyxPQUFPLEVBQUUsTUFBTTtZQUNoRCxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyx5QkFBeUIsRUFBRSxFQUFFLEVBQUUsQ0FBQyxLQUFVLEVBQUUsTUFBVztnQkFDeEUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUseUJBQXlCLENBQUMsQ0FBQTtnQkFDbEQsT0FBTyxFQUFFLENBQUE7WUFDYixDQUFDLENBQUMsQ0FBQTtRQUNOLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztJQUVELDREQUE0RDtJQUNyRCxLQUFLLENBQUMsbUJBQW1CLENBQUMsTUFBbUQ7UUFDaEYsTUFBTSxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQThDLENBQUMsT0FBTyxFQUFFLE1BQU07WUFDbEYsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsc0NBQXNDLEVBQUUsTUFBTSxFQUFFLENBQUMsS0FBVSxFQUFFLE1BQVc7Z0JBQ3pGLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLHNDQUFzQyxDQUFDLENBQUE7Z0JBQy9ELE9BQU8sQ0FBQyxNQUFxRCxDQUFDLENBQUE7WUFDbEUsQ0FBQyxDQUFDLENBQUE7UUFDTixDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUM7SUFFRCwrRUFBK0U7SUFDeEUsS0FBSyxDQUFDLDJCQUEyQixDQUFDLE1BQTJEO1FBRTVGLE1BQU0sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFzRCxDQUFDLE9BQU8sRUFBRSxNQUFNO1lBQzFGLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLDhDQUE4QyxFQUFFLE1BQU0sRUFBRSxDQUFDLEtBQVUsRUFBRSxNQUFXO2dCQUNqRyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSw4Q0FBOEMsQ0FBQyxDQUFBO2dCQUN2RSxPQUFPLENBQUMsTUFBNkQsQ0FBQyxDQUFBO1lBQzFFLENBQUMsQ0FBQyxDQUFBO1FBQ04sQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0NBRVI7QUFFRCxrQkFBZSxnQkFBZ0IsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEV2ZW50RW1pdHRlciBmcm9tICdldmVudHMnXG5pbXBvcnQgRGVidWdnZXJFcnJvciBmcm9tICcuL0RlYnVnZ2VyRXJyb3InXG5pbXBvcnQgUGFnZSBmcm9tICcuL1BhZ2UnXG5cbmRlY2xhcmUgaW50ZXJmYWNlIEFwcGxpY2F0aW9uQ2FjaGUge1xuXG4gICAgLyoqIE5vIGRlc2NyaXB0aW9uICovXG4gICAgb24oZXZlbnQ6ICdhcHBsaWNhdGlvbkNhY2hlU3RhdHVzVXBkYXRlZCcsIGxpc3RlbmVyOiAocGFyYW1zOiBBcHBsaWNhdGlvbkNhY2hlLkV2ZW50UGFyYW1zLmFwcGxpY2F0aW9uQ2FjaGVTdGF0dXNVcGRhdGVkKSA9PiB2b2lkKTogdm9pZFxuICAgIC8qKiBObyBkZXNjcmlwdGlvbiAqL1xuICAgIG9uY2UoZXZlbnQ6ICdhcHBsaWNhdGlvbkNhY2hlU3RhdHVzVXBkYXRlZCcsIGxpc3RlbmVyOiAocGFyYW1zOiBBcHBsaWNhdGlvbkNhY2hlLkV2ZW50UGFyYW1zLmFwcGxpY2F0aW9uQ2FjaGVTdGF0dXNVcGRhdGVkKSA9PiB2b2lkKTogdm9pZFxuXG4gICAgLyoqIE5vIGRlc2NyaXB0aW9uICovXG4gICAgb24oZXZlbnQ6ICduZXR3b3JrU3RhdGVVcGRhdGVkJywgbGlzdGVuZXI6IChwYXJhbXM6IEFwcGxpY2F0aW9uQ2FjaGUuRXZlbnRQYXJhbXMubmV0d29ya1N0YXRlVXBkYXRlZCkgPT4gdm9pZCk6IHZvaWRcbiAgICAvKiogTm8gZGVzY3JpcHRpb24gKi9cbiAgICBvbmNlKGV2ZW50OiAnbmV0d29ya1N0YXRlVXBkYXRlZCcsIGxpc3RlbmVyOiAocGFyYW1zOiBBcHBsaWNhdGlvbkNhY2hlLkV2ZW50UGFyYW1zLm5ldHdvcmtTdGF0ZVVwZGF0ZWQpID0+IHZvaWQpOiB2b2lkXG5cbn1cblxubW9kdWxlIEFwcGxpY2F0aW9uQ2FjaGUge1xuICAgIC8qKioqKioqKioqKioqKipcbiAgICAgKioqKiBUeXBlcyAqKioqXG4gICAgICoqKioqKioqKioqKioqL1xuXG4gICAgLyoqXG4gICAgICogRGV0YWlsZWQgYXBwbGljYXRpb24gY2FjaGUgcmVzb3VyY2UgaW5mb3JtYXRpb24uXG4gICAgICogQGV4cGVyaW1lbnRhbFxuICAgICAqL1xuICAgIGV4cG9ydCB0eXBlIEFwcGxpY2F0aW9uQ2FjaGVSZXNvdXJjZSA9IHtcbiAgICAgICAgLyoqIFJlc291cmNlIHVybC4gKi9cbiAgICAgICAgdXJsOiBzdHJpbmdcblxuICAgICAgICAvKiogUmVzb3VyY2Ugc2l6ZS4gKi9cbiAgICAgICAgc2l6ZTogbnVtYmVyXG5cbiAgICAgICAgLyoqIFJlc291cmNlIHR5cGUuICovXG4gICAgICAgIHR5cGU6IHN0cmluZ1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERldGFpbGVkIGFwcGxpY2F0aW9uIGNhY2hlIGluZm9ybWF0aW9uLlxuICAgICAqIEBleHBlcmltZW50YWxcbiAgICAgKi9cbiAgICBleHBvcnQgdHlwZSBBcHBsaWNhdGlvbkNhY2hlID0ge1xuICAgICAgICAvKiogTWFuaWZlc3QgVVJMLiAqL1xuICAgICAgICBtYW5pZmVzdFVSTDogc3RyaW5nXG5cbiAgICAgICAgLyoqIEFwcGxpY2F0aW9uIGNhY2hlIHNpemUuICovXG4gICAgICAgIHNpemU6IG51bWJlclxuXG4gICAgICAgIC8qKiBBcHBsaWNhdGlvbiBjYWNoZSBjcmVhdGlvbiB0aW1lLiAqL1xuICAgICAgICBjcmVhdGlvblRpbWU6IG51bWJlclxuXG4gICAgICAgIC8qKiBBcHBsaWNhdGlvbiBjYWNoZSB1cGRhdGUgdGltZS4gKi9cbiAgICAgICAgdXBkYXRlVGltZTogbnVtYmVyXG5cbiAgICAgICAgLyoqIEFwcGxpY2F0aW9uIGNhY2hlIHJlc291cmNlcy4gKi9cbiAgICAgICAgcmVzb3VyY2VzOiBBcHBsaWNhdGlvbkNhY2hlUmVzb3VyY2VbXVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZyYW1lIGlkZW50aWZpZXIgLSBtYW5pZmVzdCBVUkwgcGFpci5cbiAgICAgKiBAZXhwZXJpbWVudGFsXG4gICAgICovXG4gICAgZXhwb3J0IHR5cGUgRnJhbWVXaXRoTWFuaWZlc3QgPSB7XG4gICAgICAgIC8qKiBGcmFtZSBpZGVudGlmaWVyLiAqL1xuICAgICAgICBmcmFtZUlkOiBQYWdlLkZyYW1lSWRcblxuICAgICAgICAvKiogTWFuaWZlc3QgVVJMLiAqL1xuICAgICAgICBtYW5pZmVzdFVSTDogc3RyaW5nXG5cbiAgICAgICAgLyoqIEFwcGxpY2F0aW9uIGNhY2hlIHN0YXR1cy4gKi9cbiAgICAgICAgc3RhdHVzOiBudW1iZXJcbiAgICB9XG5cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICAqKioqIENvbW1hbmQgUGFyYW1ldGVycyAqKioqXG4gICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICBleHBvcnQgbW9kdWxlIFBhcmFtcyB7XG4gICAgICAgIC8qKiBAZXhwZXJpbWVudGFsICovXG4gICAgICAgIGV4cG9ydCB0eXBlIGdldE1hbmlmZXN0Rm9yRnJhbWUgPSB7XG4gICAgICAgICAgICAvKiogSWRlbnRpZmllciBvZiB0aGUgZnJhbWUgY29udGFpbmluZyBkb2N1bWVudCB3aG9zZSBtYW5pZmVzdCBpcyByZXRyaWV2ZWQuICovXG4gICAgICAgICAgICBmcmFtZUlkOiBQYWdlLkZyYW1lSWRcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKiBAZXhwZXJpbWVudGFsICovXG4gICAgICAgIGV4cG9ydCB0eXBlIGdldEFwcGxpY2F0aW9uQ2FjaGVGb3JGcmFtZSA9IHtcbiAgICAgICAgICAgIC8qKiBJZGVudGlmaWVyIG9mIHRoZSBmcmFtZSBjb250YWluaW5nIGRvY3VtZW50IHdob3NlIGFwcGxpY2F0aW9uIGNhY2hlIGlzIHJldHJpZXZlZC4gKi9cbiAgICAgICAgICAgIGZyYW1lSWQ6IFBhZ2UuRnJhbWVJZFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICAqKioqIENvbW1hbmQgUmVzdWx0ICoqKipcbiAgICAgKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgZXhwb3J0IG1vZHVsZSBSZXN1bHQge1xuICAgICAgICAvKiogQGV4cGVyaW1lbnRhbCAqL1xuICAgICAgICBleHBvcnQgdHlwZSBnZXRGcmFtZXNXaXRoTWFuaWZlc3RzID0ge1xuICAgICAgICAgICAgLyoqIEFycmF5IG9mIGZyYW1lIGlkZW50aWZpZXJzIHdpdGggbWFuaWZlc3QgdXJscyBmb3IgZWFjaCBmcmFtZSBjb250YWluaW5nIGEgZG9jdW1lbnQgYXNzb2NpYXRlZCB3aXRoIHNvbWUgYXBwbGljYXRpb24gY2FjaGUuICovXG4gICAgICAgICAgICBmcmFtZUlkczogRnJhbWVXaXRoTWFuaWZlc3RbXVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqIEBleHBlcmltZW50YWwgKi9cbiAgICAgICAgZXhwb3J0IHR5cGUgZ2V0TWFuaWZlc3RGb3JGcmFtZSA9IHtcbiAgICAgICAgICAgIC8qKiBNYW5pZmVzdCBVUkwgZm9yIGRvY3VtZW50IGluIHRoZSBnaXZlbiBmcmFtZS4gKi9cbiAgICAgICAgICAgIG1hbmlmZXN0VVJMOiBzdHJpbmdcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKiBAZXhwZXJpbWVudGFsICovXG4gICAgICAgIGV4cG9ydCB0eXBlIGdldEFwcGxpY2F0aW9uQ2FjaGVGb3JGcmFtZSA9IHtcbiAgICAgICAgICAgIC8qKiBSZWxldmFudCBhcHBsaWNhdGlvbiBjYWNoZSBkYXRhIGZvciB0aGUgZG9jdW1lbnQgaW4gZ2l2ZW4gZnJhbWUuICovXG4gICAgICAgICAgICBhcHBsaWNhdGlvbkNhY2hlOiBBcHBsaWNhdGlvbkNhY2hlXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgKioqKiBFdmVudCBQYXJhbWV0ZXJzICoqKipcbiAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICBleHBvcnQgbW9kdWxlIEV2ZW50UGFyYW1zIHtcbiAgICAgICAgLyoqIEBleHBlcmltZW50YWwgKi9cbiAgICAgICAgZXhwb3J0IHR5cGUgYXBwbGljYXRpb25DYWNoZVN0YXR1c1VwZGF0ZWQgPSB7XG4gICAgICAgICAgICAvKiogSWRlbnRpZmllciBvZiB0aGUgZnJhbWUgY29udGFpbmluZyBkb2N1bWVudCB3aG9zZSBhcHBsaWNhdGlvbiBjYWNoZSB1cGRhdGVkIHN0YXR1cy4gKi9cbiAgICAgICAgICAgIGZyYW1lSWQ6IFBhZ2UuRnJhbWVJZFxuXG4gICAgICAgICAgICAvKiogTWFuaWZlc3QgVVJMLiAqL1xuICAgICAgICAgICAgbWFuaWZlc3RVUkw6IHN0cmluZ1xuXG4gICAgICAgICAgICAvKiogVXBkYXRlZCBhcHBsaWNhdGlvbiBjYWNoZSBzdGF0dXMuICovXG4gICAgICAgICAgICBzdGF0dXM6IG51bWJlclxuICAgICAgICB9XG5cbiAgICAgICAgLyoqIEBleHBlcmltZW50YWwgKi9cbiAgICAgICAgZXhwb3J0IHR5cGUgbmV0d29ya1N0YXRlVXBkYXRlZCA9IHtcbiAgICAgICAgICAgIC8qKiBObyBkZXNjcmlwdGlvbiAqL1xuICAgICAgICAgICAgaXNOb3dPbmxpbmU6IGJvb2xlYW5cbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBObyBkZXNjcmlwdGlvblxuICogQGV4cGVyaW1lbnRhbFxuICovXG5jbGFzcyBBcHBsaWNhdGlvbkNhY2hlIHtcbiAgICBwcml2YXRlIGV2ZW50cyA9IG5ldyBFdmVudEVtaXR0ZXIoKVxuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBkYmc6IGFueSAvKiBFbGVjdHJvbi5EZWJ1Z2dlciovICkge1xuXG4gICAgICAgIHRoaXMuZGJnLm9uKCdtZXNzYWdlJywgKGV2ZW50OiBhbnksIG1ldGhvZDogYW55LCBwYXJhbXM6IGFueSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgW2RvbWFpbiwgZG9tYWluTWV0aG9kXSA9IG1ldGhvZC5zcGxpdCgnLicpXG4gICAgICAgICAgICB0aGlzLmV2ZW50cy5lbWl0KGRvbWFpbk1ldGhvZCwgcGFyYW1zKVxuICAgICAgICB9KVxuXG4gICAgICAgIGlmICghdGhpcy5kYmcuaXNBdHRhY2hlZCgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBjcmVhdGUgQXBwbGljYXRpb25DYWNoZSBEb21haW4gQ2xhc3MgYmVjYXVzZSB0aGUgZGVidWdnZXIgaXMgbm90IGF0dGFjaGVkLmApXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgb24oZXZlbnQ6IHN0cmluZywgbGlzdGVuZXI6IEZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzLm9uKGV2ZW50LCBsaXN0ZW5lcilcbiAgICB9XG5cbiAgICBwdWJsaWMgb25jZShldmVudDogc3RyaW5nLCBsaXN0ZW5lcjogRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5ldmVudHMub24oZXZlbnQsIGxpc3RlbmVyKVxuICAgIH1cblxuICAgIHByaXZhdGUgYXNzZXJ0RXJyb3IoZXJyb3I6IGFueSwgY29tbWFuZE5hbWU6IHN0cmluZykge1xuICAgICAgICBpZiAoJ21lc3NhZ2UnIGluIGVycm9yICYmICdjb2RlJyBpbiBlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IERlYnVnZ2VyRXJyb3IoZXJyb3IubWVzc2FnZSwgZXJyb3IuY29kZSwgY29tbWFuZE5hbWUpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogUmV0dXJucyBhcnJheSBvZiBmcmFtZSBpZGVudGlmaWVycyB3aXRoIG1hbmlmZXN0IHVybHMgZm9yIGVhY2ggZnJhbWUgY29udGFpbmluZyBhIGRvY3VtZW50IGFzc29jaWF0ZWQgd2l0aCBzb21lIGFwcGxpY2F0aW9uIGNhY2hlLiAqL1xuICAgIHB1YmxpYyBhc3luYyBnZXRGcmFtZXNXaXRoTWFuaWZlc3RzKCk6IFByb21pc2U8QXBwbGljYXRpb25DYWNoZS5SZXN1bHQuZ2V0RnJhbWVzV2l0aE1hbmlmZXN0cz57XG4gICAgICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZTxBcHBsaWNhdGlvbkNhY2hlLlJlc3VsdC5nZXRGcmFtZXNXaXRoTWFuaWZlc3RzPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRiZy5zZW5kQ29tbWFuZCgnQXBwbGljYXRpb25DYWNoZS5nZXRGcmFtZXNXaXRoTWFuaWZlc3RzJywge30sIChlcnJvcjogYW55LCByZXN1bHQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYXNzZXJ0RXJyb3IoZXJyb3IsICdBcHBsaWNhdGlvbkNhY2hlLmdldEZyYW1lc1dpdGhNYW5pZmVzdHMnKVxuICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0IGFzIEFwcGxpY2F0aW9uQ2FjaGUuUmVzdWx0LmdldEZyYW1lc1dpdGhNYW5pZmVzdHMpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIC8qKiBFbmFibGVzIGFwcGxpY2F0aW9uIGNhY2hlIGRvbWFpbiBub3RpZmljYXRpb25zLiAqL1xuICAgIHB1YmxpYyBhc3luYyBlbmFibGUoKTogUHJvbWlzZTx1bmRlZmluZWQ+e1xuICAgICAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2U8dW5kZWZpbmVkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRiZy5zZW5kQ29tbWFuZCgnQXBwbGljYXRpb25DYWNoZS5lbmFibGUnLCB7fSwgKGVycm9yOiBhbnksIHJlc3VsdDogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5hc3NlcnRFcnJvcihlcnJvciwgJ0FwcGxpY2F0aW9uQ2FjaGUuZW5hYmxlJylcbiAgICAgICAgICAgICAgICByZXNvbHZlKClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgLyoqIFJldHVybnMgbWFuaWZlc3QgVVJMIGZvciBkb2N1bWVudCBpbiB0aGUgZ2l2ZW4gZnJhbWUuICovXG4gICAgcHVibGljIGFzeW5jIGdldE1hbmlmZXN0Rm9yRnJhbWUocGFyYW1zOiBBcHBsaWNhdGlvbkNhY2hlLlBhcmFtcy5nZXRNYW5pZmVzdEZvckZyYW1lKTogUHJvbWlzZTxBcHBsaWNhdGlvbkNhY2hlLlJlc3VsdC5nZXRNYW5pZmVzdEZvckZyYW1lPntcbiAgICAgICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlPEFwcGxpY2F0aW9uQ2FjaGUuUmVzdWx0LmdldE1hbmlmZXN0Rm9yRnJhbWU+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGJnLnNlbmRDb21tYW5kKCdBcHBsaWNhdGlvbkNhY2hlLmdldE1hbmlmZXN0Rm9yRnJhbWUnLCBwYXJhbXMsIChlcnJvcjogYW55LCByZXN1bHQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYXNzZXJ0RXJyb3IoZXJyb3IsICdBcHBsaWNhdGlvbkNhY2hlLmdldE1hbmlmZXN0Rm9yRnJhbWUnKVxuICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0IGFzIEFwcGxpY2F0aW9uQ2FjaGUuUmVzdWx0LmdldE1hbmlmZXN0Rm9yRnJhbWUpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIC8qKiBSZXR1cm5zIHJlbGV2YW50IGFwcGxpY2F0aW9uIGNhY2hlIGRhdGEgZm9yIHRoZSBkb2N1bWVudCBpbiBnaXZlbiBmcmFtZS4gKi9cbiAgICBwdWJsaWMgYXN5bmMgZ2V0QXBwbGljYXRpb25DYWNoZUZvckZyYW1lKHBhcmFtczogQXBwbGljYXRpb25DYWNoZS5QYXJhbXMuZ2V0QXBwbGljYXRpb25DYWNoZUZvckZyYW1lKTogUHJvbWlzZSA8IEFwcGxpY2F0aW9uQ2FjaGUuUmVzdWx0LmdldEFwcGxpY2F0aW9uQ2FjaGVGb3JGcmFtZSA+XG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZTxBcHBsaWNhdGlvbkNhY2hlLlJlc3VsdC5nZXRBcHBsaWNhdGlvbkNhY2hlRm9yRnJhbWU+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmRiZy5zZW5kQ29tbWFuZCgnQXBwbGljYXRpb25DYWNoZS5nZXRBcHBsaWNhdGlvbkNhY2hlRm9yRnJhbWUnLCBwYXJhbXMsIChlcnJvcjogYW55LCByZXN1bHQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFzc2VydEVycm9yKGVycm9yLCAnQXBwbGljYXRpb25DYWNoZS5nZXRBcHBsaWNhdGlvbkNhY2hlRm9yRnJhbWUnKVxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdCBhcyBBcHBsaWNhdGlvbkNhY2hlLlJlc3VsdC5nZXRBcHBsaWNhdGlvbkNhY2hlRm9yRnJhbWUpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBBcHBsaWNhdGlvbkNhY2hlIl19