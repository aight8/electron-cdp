"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const DebuggerError_1 = require("./DebuggerError");
/**
 * No description
 * @experimental
 */
class Database {
    constructor(dbg /* Electron.Debugger*/) {
        this.dbg = dbg; /* Electron.Debugger*/
        this.events = new EventEmitter();
        this.dbg.on('message', (event, method, params) => {
            const [domain, domainMethod] = method.split('.');
            this.events.emit(domainMethod, params);
        });
        if (!this.dbg.isAttached()) {
            throw new Error(`Cannot create Database Domain Class because the debugger is not attached.`);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.on(event, listener);
    }
    assertError(error, commandName) {
        if ('message' in error && 'code' in error) {
            throw new DebuggerError_1.default(error.message, error.code, commandName);
        }
    }
    /** Enables database tracking, database events will now be delivered to the client. */
    async enable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Database.enable', {}, (error, result) => {
                this.assertError(error, 'Database.enable');
                resolve();
            });
        });
    }
    /** Disables database tracking, prevents database events from being sent to the client. */
    async disable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Database.disable', {}, (error, result) => {
                this.assertError(error, 'Database.disable');
                resolve();
            });
        });
    }
    /** No description */
    async getDatabaseTableNames(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Database.getDatabaseTableNames', params, (error, result) => {
                this.assertError(error, 'Database.getDatabaseTableNames');
                resolve(result);
            });
        });
    }
    /** No description */
    async executeSQL(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Database.executeSQL', params, (error, result) => {
                this.assertError(error, 'Database.executeSQL');
                resolve(result);
            });
        });
    }
}
exports.default = Database;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0YWJhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9nZW5lcmF0ZWQtdHMvRGF0YWJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx1Q0FBc0M7QUFDdEMsbURBQTJDO0FBb0gzQzs7O0dBR0c7QUFDSDtJQUdJLFlBQTZCLEdBQVEsQ0FBQyxzQkFBc0I7UUFBL0IsUUFBRyxHQUFILEdBQUcsQ0FBSyxDQUFDLHNCQUFzQjtRQUZwRCxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQTtRQUkvQixJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFVLEVBQUUsTUFBVyxFQUFFLE1BQVc7WUFDeEQsTUFBTSxDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQ2hELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUMxQyxDQUFDLENBQUMsQ0FBQTtRQUVGLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDekIsTUFBTSxJQUFJLEtBQUssQ0FBQywyRUFBMkUsQ0FBQyxDQUFBO1FBQ2hHLENBQUM7SUFDTCxDQUFDO0lBRU0sRUFBRSxDQUFDLEtBQWEsRUFBRSxRQUFrQjtRQUN2QyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDbkMsQ0FBQztJQUVNLElBQUksQ0FBQyxLQUFhLEVBQUUsUUFBa0I7UUFDekMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQ25DLENBQUM7SUFFTyxXQUFXLENBQUMsS0FBVSxFQUFFLFdBQW1CO1FBQy9DLEVBQUUsQ0FBQyxDQUFDLFNBQVMsSUFBSSxLQUFLLElBQUksTUFBTSxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDeEMsTUFBTSxJQUFJLHVCQUFhLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFBO1FBQ25FLENBQUM7SUFDTCxDQUFDO0lBRUQsc0ZBQXNGO0lBQy9FLEtBQUssQ0FBQyxNQUFNO1FBQ2YsTUFBTSxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQVksQ0FBQyxPQUFPLEVBQUUsTUFBTTtZQUNoRCxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLEVBQUUsQ0FBQyxLQUFVLEVBQUUsTUFBVztnQkFDaEUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLENBQUMsQ0FBQTtnQkFDMUMsT0FBTyxFQUFFLENBQUE7WUFDYixDQUFDLENBQUMsQ0FBQTtRQUNOLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztJQUVELDBGQUEwRjtJQUNuRixLQUFLLENBQUMsT0FBTztRQUNoQixNQUFNLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBWSxDQUFDLE9BQU8sRUFBRSxNQUFNO1lBQ2hELElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLGtCQUFrQixFQUFFLEVBQUUsRUFBRSxDQUFDLEtBQVUsRUFBRSxNQUFXO2dCQUNqRSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxrQkFBa0IsQ0FBQyxDQUFBO2dCQUMzQyxPQUFPLEVBQUUsQ0FBQTtZQUNiLENBQUMsQ0FBQyxDQUFBO1FBQ04sQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0lBRUQscUJBQXFCO0lBQ2QsS0FBSyxDQUFDLHFCQUFxQixDQUFDLE1BQTZDO1FBQzVFLE1BQU0sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUF3QyxDQUFDLE9BQU8sRUFBRSxNQUFNO1lBQzVFLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLGdDQUFnQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEtBQVUsRUFBRSxNQUFXO2dCQUNuRixJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxnQ0FBZ0MsQ0FBQyxDQUFBO2dCQUN6RCxPQUFPLENBQUMsTUFBK0MsQ0FBQyxDQUFBO1lBQzVELENBQUMsQ0FBQyxDQUFBO1FBQ04sQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0lBRUQscUJBQXFCO0lBQ2QsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFrQztRQUN0RCxNQUFNLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBNkIsQ0FBQyxPQUFPLEVBQUUsTUFBTTtZQUNqRSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxxQkFBcUIsRUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFVLEVBQUUsTUFBVztnQkFDeEUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUscUJBQXFCLENBQUMsQ0FBQTtnQkFDOUMsT0FBTyxDQUFDLE1BQW9DLENBQUMsQ0FBQTtZQUNqRCxDQUFDLENBQUMsQ0FBQTtRQUNOLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztDQUVKO0FBRUQsa0JBQWUsUUFBUSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgRXZlbnRFbWl0dGVyIGZyb20gJ2V2ZW50cydcbmltcG9ydCBEZWJ1Z2dlckVycm9yIGZyb20gJy4vRGVidWdnZXJFcnJvcidcblxuZGVjbGFyZSBpbnRlcmZhY2UgRGF0YWJhc2Uge1xuXG4gICAgLyoqIE5vIGRlc2NyaXB0aW9uICovXG4gICAgb24oZXZlbnQ6ICdhZGREYXRhYmFzZScsIGxpc3RlbmVyOiAocGFyYW1zOiBEYXRhYmFzZS5FdmVudFBhcmFtcy5hZGREYXRhYmFzZSkgPT4gdm9pZCk6IHZvaWRcbiAgICAvKiogTm8gZGVzY3JpcHRpb24gKi9cbiAgICBvbmNlKGV2ZW50OiAnYWRkRGF0YWJhc2UnLCBsaXN0ZW5lcjogKHBhcmFtczogRGF0YWJhc2UuRXZlbnRQYXJhbXMuYWRkRGF0YWJhc2UpID0+IHZvaWQpOiB2b2lkXG5cbn1cblxubW9kdWxlIERhdGFiYXNlIHtcbiAgICAvKioqKioqKioqKioqKioqXG4gICAgICoqKiogVHlwZXMgKioqKlxuICAgICAqKioqKioqKioqKioqKi9cblxuICAgIC8qKlxuICAgICAqIFVuaXF1ZSBpZGVudGlmaWVyIG9mIERhdGFiYXNlIG9iamVjdC5cbiAgICAgKiBAZXhwZXJpbWVudGFsXG4gICAgICovXG4gICAgZXhwb3J0IHR5cGUgRGF0YWJhc2VJZCA9IHN0cmluZ1xuXG4gICAgLyoqXG4gICAgICogRGF0YWJhc2Ugb2JqZWN0LlxuICAgICAqIEBleHBlcmltZW50YWxcbiAgICAgKi9cbiAgICBleHBvcnQgdHlwZSBEYXRhYmFzZSA9IHtcbiAgICAgICAgLyoqIERhdGFiYXNlIElELiAqL1xuICAgICAgICBpZDogRGF0YWJhc2VJZFxuXG4gICAgICAgIC8qKiBEYXRhYmFzZSBkb21haW4uICovXG4gICAgICAgIGRvbWFpbjogc3RyaW5nXG5cbiAgICAgICAgLyoqIERhdGFiYXNlIG5hbWUuICovXG4gICAgICAgIG5hbWU6IHN0cmluZ1xuXG4gICAgICAgIC8qKiBEYXRhYmFzZSB2ZXJzaW9uLiAqL1xuICAgICAgICB2ZXJzaW9uOiBzdHJpbmdcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEYXRhYmFzZSBlcnJvci5cbiAgICAgKiBAZXhwZXJpbWVudGFsXG4gICAgICovXG4gICAgZXhwb3J0IHR5cGUgRXJyb3IgPSB7XG4gICAgICAgIC8qKiBFcnJvciBtZXNzYWdlLiAqL1xuICAgICAgICBtZXNzYWdlOiBzdHJpbmdcblxuICAgICAgICAvKiogRXJyb3IgY29kZS4gKi9cbiAgICAgICAgY29kZTogbnVtYmVyXG4gICAgfVxuXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgKioqKiBDb21tYW5kIFBhcmFtZXRlcnMgKioqKlxuICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgZXhwb3J0IG1vZHVsZSBQYXJhbXMge1xuICAgICAgICAvKiogQGV4cGVyaW1lbnRhbCAqL1xuICAgICAgICBleHBvcnQgdHlwZSBnZXREYXRhYmFzZVRhYmxlTmFtZXMgPSB7XG4gICAgICAgICAgICAvKiogTm8gZGVzY3JpcHRpb24gKi9cbiAgICAgICAgICAgIGRhdGFiYXNlSWQ6IERhdGFiYXNlSWRcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKiBAZXhwZXJpbWVudGFsICovXG4gICAgICAgIGV4cG9ydCB0eXBlIGV4ZWN1dGVTUUwgPSB7XG4gICAgICAgICAgICAvKiogTm8gZGVzY3JpcHRpb24gKi9cbiAgICAgICAgICAgIGRhdGFiYXNlSWQ6IERhdGFiYXNlSWRcblxuICAgICAgICAgICAgLyoqIE5vIGRlc2NyaXB0aW9uICovXG4gICAgICAgICAgICBxdWVyeTogc3RyaW5nXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgICoqKiogQ29tbWFuZCBSZXN1bHQgKioqKlxuICAgICAqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICBleHBvcnQgbW9kdWxlIFJlc3VsdCB7XG4gICAgICAgIC8qKiBAZXhwZXJpbWVudGFsICovXG4gICAgICAgIGV4cG9ydCB0eXBlIGdldERhdGFiYXNlVGFibGVOYW1lcyA9IHtcbiAgICAgICAgICAgIC8qKiBObyBkZXNjcmlwdGlvbiAqL1xuICAgICAgICAgICAgdGFibGVOYW1lczogc3RyaW5nW11cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKiBAZXhwZXJpbWVudGFsICovXG4gICAgICAgIGV4cG9ydCB0eXBlIGV4ZWN1dGVTUUwgPSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE5vIGRlc2NyaXB0aW9uXG4gICAgICAgICAgICAgKiBAb3B0aW9uYWxcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29sdW1uTmFtZXM/OiBzdHJpbmdbXVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE5vIGRlc2NyaXB0aW9uXG4gICAgICAgICAgICAgKiBAb3B0aW9uYWxcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFsdWVzPzogYW55W11cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBObyBkZXNjcmlwdGlvblxuICAgICAgICAgICAgICogQG9wdGlvbmFsXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHNxbEVycm9yPzogRXJyb3JcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICAqKioqIEV2ZW50IFBhcmFtZXRlcnMgKioqKlxuICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICAgIGV4cG9ydCBtb2R1bGUgRXZlbnRQYXJhbXMge1xuICAgICAgICAvKiogQGV4cGVyaW1lbnRhbCAqL1xuICAgICAgICBleHBvcnQgdHlwZSBhZGREYXRhYmFzZSA9IHtcbiAgICAgICAgICAgIC8qKiBObyBkZXNjcmlwdGlvbiAqL1xuICAgICAgICAgICAgZGF0YWJhc2U6IERhdGFiYXNlXG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogTm8gZGVzY3JpcHRpb25cbiAqIEBleHBlcmltZW50YWxcbiAqL1xuY2xhc3MgRGF0YWJhc2Uge1xuICAgIHByaXZhdGUgZXZlbnRzID0gbmV3IEV2ZW50RW1pdHRlcigpXG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGRiZzogYW55IC8qIEVsZWN0cm9uLkRlYnVnZ2VyKi8gKSB7XG5cbiAgICAgICAgdGhpcy5kYmcub24oJ21lc3NhZ2UnLCAoZXZlbnQ6IGFueSwgbWV0aG9kOiBhbnksIHBhcmFtczogYW55KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBbZG9tYWluLCBkb21haW5NZXRob2RdID0gbWV0aG9kLnNwbGl0KCcuJylcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzLmVtaXQoZG9tYWluTWV0aG9kLCBwYXJhbXMpXG4gICAgICAgIH0pXG5cbiAgICAgICAgaWYgKCF0aGlzLmRiZy5pc0F0dGFjaGVkKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGNyZWF0ZSBEYXRhYmFzZSBEb21haW4gQ2xhc3MgYmVjYXVzZSB0aGUgZGVidWdnZXIgaXMgbm90IGF0dGFjaGVkLmApXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgb24oZXZlbnQ6IHN0cmluZywgbGlzdGVuZXI6IEZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzLm9uKGV2ZW50LCBsaXN0ZW5lcilcbiAgICB9XG5cbiAgICBwdWJsaWMgb25jZShldmVudDogc3RyaW5nLCBsaXN0ZW5lcjogRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5ldmVudHMub24oZXZlbnQsIGxpc3RlbmVyKVxuICAgIH1cblxuICAgIHByaXZhdGUgYXNzZXJ0RXJyb3IoZXJyb3I6IGFueSwgY29tbWFuZE5hbWU6IHN0cmluZykge1xuICAgICAgICBpZiAoJ21lc3NhZ2UnIGluIGVycm9yICYmICdjb2RlJyBpbiBlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IERlYnVnZ2VyRXJyb3IoZXJyb3IubWVzc2FnZSwgZXJyb3IuY29kZSwgY29tbWFuZE5hbWUpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogRW5hYmxlcyBkYXRhYmFzZSB0cmFja2luZywgZGF0YWJhc2UgZXZlbnRzIHdpbGwgbm93IGJlIGRlbGl2ZXJlZCB0byB0aGUgY2xpZW50LiAqL1xuICAgIHB1YmxpYyBhc3luYyBlbmFibGUoKTogUHJvbWlzZTx1bmRlZmluZWQ+e1xuICAgICAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2U8dW5kZWZpbmVkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRiZy5zZW5kQ29tbWFuZCgnRGF0YWJhc2UuZW5hYmxlJywge30sIChlcnJvcjogYW55LCByZXN1bHQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYXNzZXJ0RXJyb3IoZXJyb3IsICdEYXRhYmFzZS5lbmFibGUnKVxuICAgICAgICAgICAgICAgIHJlc29sdmUoKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvKiogRGlzYWJsZXMgZGF0YWJhc2UgdHJhY2tpbmcsIHByZXZlbnRzIGRhdGFiYXNlIGV2ZW50cyBmcm9tIGJlaW5nIHNlbnQgdG8gdGhlIGNsaWVudC4gKi9cbiAgICBwdWJsaWMgYXN5bmMgZGlzYWJsZSgpOiBQcm9taXNlPHVuZGVmaW5lZD57XG4gICAgICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZTx1bmRlZmluZWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGJnLnNlbmRDb21tYW5kKCdEYXRhYmFzZS5kaXNhYmxlJywge30sIChlcnJvcjogYW55LCByZXN1bHQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYXNzZXJ0RXJyb3IoZXJyb3IsICdEYXRhYmFzZS5kaXNhYmxlJylcbiAgICAgICAgICAgICAgICByZXNvbHZlKClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgLyoqIE5vIGRlc2NyaXB0aW9uICovXG4gICAgcHVibGljIGFzeW5jIGdldERhdGFiYXNlVGFibGVOYW1lcyhwYXJhbXM6IERhdGFiYXNlLlBhcmFtcy5nZXREYXRhYmFzZVRhYmxlTmFtZXMpOiBQcm9taXNlPERhdGFiYXNlLlJlc3VsdC5nZXREYXRhYmFzZVRhYmxlTmFtZXM+e1xuICAgICAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2U8RGF0YWJhc2UuUmVzdWx0LmdldERhdGFiYXNlVGFibGVOYW1lcz4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kYmcuc2VuZENvbW1hbmQoJ0RhdGFiYXNlLmdldERhdGFiYXNlVGFibGVOYW1lcycsIHBhcmFtcywgKGVycm9yOiBhbnksIHJlc3VsdDogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5hc3NlcnRFcnJvcihlcnJvciwgJ0RhdGFiYXNlLmdldERhdGFiYXNlVGFibGVOYW1lcycpXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQgYXMgRGF0YWJhc2UuUmVzdWx0LmdldERhdGFiYXNlVGFibGVOYW1lcylcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgLyoqIE5vIGRlc2NyaXB0aW9uICovXG4gICAgcHVibGljIGFzeW5jIGV4ZWN1dGVTUUwocGFyYW1zOiBEYXRhYmFzZS5QYXJhbXMuZXhlY3V0ZVNRTCk6IFByb21pc2U8RGF0YWJhc2UuUmVzdWx0LmV4ZWN1dGVTUUw+e1xuICAgICAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2U8RGF0YWJhc2UuUmVzdWx0LmV4ZWN1dGVTUUw+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGJnLnNlbmRDb21tYW5kKCdEYXRhYmFzZS5leGVjdXRlU1FMJywgcGFyYW1zLCAoZXJyb3I6IGFueSwgcmVzdWx0OiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmFzc2VydEVycm9yKGVycm9yLCAnRGF0YWJhc2UuZXhlY3V0ZVNRTCcpXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQgYXMgRGF0YWJhc2UuUmVzdWx0LmV4ZWN1dGVTUUwpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBEYXRhYmFzZSJdfQ==