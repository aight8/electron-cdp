"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const DebuggerError_1 = require("./DebuggerError");
/**
 * No description
 * @experimental
 */
class LayerTree {
    constructor(dbg /* Electron.Debugger*/) {
        this.dbg = dbg; /* Electron.Debugger*/
        this.events = new EventEmitter();
        this.dbg.on('message', (event, method, params) => {
            const [domain, domainMethod] = method.split('.');
            this.events.emit(domainMethod, params);
        });
        if (!this.dbg.isAttached()) {
            throw new Error(`Cannot create LayerTree Domain Class because the debugger is not attached.`);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.on(event, listener);
    }
    assertError(error, commandName) {
        if ('message' in error && 'code' in error) {
            throw new DebuggerError_1.default(error.message, error.code, commandName);
        }
    }
    /** Enables compositing tree inspection. */
    async enable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('LayerTree.enable', {}, (error, result) => {
                this.assertError(error, 'LayerTree.enable');
                resolve();
            });
        });
    }
    /** Disables compositing tree inspection. */
    async disable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('LayerTree.disable', {}, (error, result) => {
                this.assertError(error, 'LayerTree.disable');
                resolve();
            });
        });
    }
    /** Provides the reasons why the given layer was composited. */
    async compositingReasons(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('LayerTree.compositingReasons', params, (error, result) => {
                this.assertError(error, 'LayerTree.compositingReasons');
                resolve(result);
            });
        });
    }
    /** Returns the layer snapshot identifier. */
    async makeSnapshot(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('LayerTree.makeSnapshot', params, (error, result) => {
                this.assertError(error, 'LayerTree.makeSnapshot');
                resolve(result);
            });
        });
    }
    /** Returns the snapshot identifier. */
    async loadSnapshot(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('LayerTree.loadSnapshot', params, (error, result) => {
                this.assertError(error, 'LayerTree.loadSnapshot');
                resolve(result);
            });
        });
    }
    /** Releases layer snapshot captured by the back-end. */
    async releaseSnapshot(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('LayerTree.releaseSnapshot', params, (error, result) => {
                this.assertError(error, 'LayerTree.releaseSnapshot');
                resolve();
            });
        });
    }
    /** No description */
    async profileSnapshot(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('LayerTree.profileSnapshot', params, (error, result) => {
                this.assertError(error, 'LayerTree.profileSnapshot');
                resolve(result);
            });
        });
    }
    /** Replays the layer snapshot and returns the resulting bitmap. */
    async replaySnapshot(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('LayerTree.replaySnapshot', params, (error, result) => {
                this.assertError(error, 'LayerTree.replaySnapshot');
                resolve(result);
            });
        });
    }
    /** Replays the layer snapshot and returns canvas log. */
    async snapshotCommandLog(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('LayerTree.snapshotCommandLog', params, (error, result) => {
                this.assertError(error, 'LayerTree.snapshotCommandLog');
                resolve(result);
            });
        });
    }
}
exports.default = LayerTree;
//# sourceMappingURL=data:application/json;base64,