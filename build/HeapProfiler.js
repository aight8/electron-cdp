"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const DebuggerError_1 = require("./DebuggerError");
/**
 * No description
 * @experimental
 */
class HeapProfiler {
    constructor(dbg /* Electron.Debugger*/) {
        this.dbg = dbg; /* Electron.Debugger*/
        this.events = new EventEmitter();
        this.dbg.on('message', (event, method, params) => {
            const [domain, domainMethod] = method.split('.');
            this.events.emit(domainMethod, params);
        });
        if (!this.dbg.isAttached()) {
            throw new Error(`Cannot create HeapProfiler Domain Class because the debugger is not attached.`);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.on(event, listener);
    }
    assertError(error, commandName) {
        if ('message' in error && 'code' in error) {
            throw new DebuggerError_1.default(error.message, error.code, commandName);
        }
    }
    /** No description */
    async enable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('HeapProfiler.enable', {}, (error, result) => {
                this.assertError(error, 'HeapProfiler.enable');
                resolve();
            });
        });
    }
    /** No description */
    async disable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('HeapProfiler.disable', {}, (error, result) => {
                this.assertError(error, 'HeapProfiler.disable');
                resolve();
            });
        });
    }
    /** No description */
    async startTrackingHeapObjects(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('HeapProfiler.startTrackingHeapObjects', params || {}, (error, result) => {
                this.assertError(error, 'HeapProfiler.startTrackingHeapObjects');
                resolve();
            });
        });
    }
    /** No description */
    async stopTrackingHeapObjects(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('HeapProfiler.stopTrackingHeapObjects', params || {}, (error, result) => {
                this.assertError(error, 'HeapProfiler.stopTrackingHeapObjects');
                resolve();
            });
        });
    }
    /** No description */
    async takeHeapSnapshot(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('HeapProfiler.takeHeapSnapshot', params || {}, (error, result) => {
                this.assertError(error, 'HeapProfiler.takeHeapSnapshot');
                resolve();
            });
        });
    }
    /** No description */
    async collectGarbage() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('HeapProfiler.collectGarbage', {}, (error, result) => {
                this.assertError(error, 'HeapProfiler.collectGarbage');
                resolve();
            });
        });
    }
    /** No description */
    async getObjectByHeapObjectId(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('HeapProfiler.getObjectByHeapObjectId', params, (error, result) => {
                this.assertError(error, 'HeapProfiler.getObjectByHeapObjectId');
                resolve(result);
            });
        });
    }
    /** Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions). */
    async addInspectedHeapObject(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('HeapProfiler.addInspectedHeapObject', params, (error, result) => {
                this.assertError(error, 'HeapProfiler.addInspectedHeapObject');
                resolve();
            });
        });
    }
    /** No description */
    async getHeapObjectId(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('HeapProfiler.getHeapObjectId', params, (error, result) => {
                this.assertError(error, 'HeapProfiler.getHeapObjectId');
                resolve(result);
            });
        });
    }
    /** No description */
    async startSampling(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('HeapProfiler.startSampling', params || {}, (error, result) => {
                this.assertError(error, 'HeapProfiler.startSampling');
                resolve();
            });
        });
    }
    /** No description */
    async stopSampling() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('HeapProfiler.stopSampling', {}, (error, result) => {
                this.assertError(error, 'HeapProfiler.stopSampling');
                resolve(result);
            });
        });
    }
}
exports.default = HeapProfiler;
//# sourceMappingURL=data:application/json;base64,