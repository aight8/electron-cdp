"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const DebuggerError_1 = require("./DebuggerError");
/**
 * This domain allows to control rendering of the page.
 * @experimental
 */
class Rendering {
    constructor(dbg /* Electron.Debugger*/) {
        this.dbg = dbg; /* Electron.Debugger*/
        this.events = new EventEmitter();
        if (!this.dbg.isAttached()) {
            throw new Error(`Cannot create Rendering Domain Class because the debugger is not attached.`);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.on(event, listener);
    }
    assertError(error, commandName) {
        if ('message' in error && 'code' in error) {
            throw new DebuggerError_1.default(error.message, error.code, commandName);
        }
    }
    /** Requests that backend shows paint rectangles */
    async setShowPaintRects(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Rendering.setShowPaintRects', params, (error, result) => {
                this.assertError(error, 'Rendering.setShowPaintRects');
                resolve();
            });
        });
    }
    /** Requests that backend shows debug borders on layers */
    async setShowDebugBorders(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Rendering.setShowDebugBorders', params, (error, result) => {
                this.assertError(error, 'Rendering.setShowDebugBorders');
                resolve();
            });
        });
    }
    /** Requests that backend shows the FPS counter */
    async setShowFPSCounter(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Rendering.setShowFPSCounter', params, (error, result) => {
                this.assertError(error, 'Rendering.setShowFPSCounter');
                resolve();
            });
        });
    }
    /** Requests that backend shows scroll bottleneck rects */
    async setShowScrollBottleneckRects(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Rendering.setShowScrollBottleneckRects', params, (error, result) => {
                this.assertError(error, 'Rendering.setShowScrollBottleneckRects');
                resolve();
            });
        });
    }
    /** Paints viewport size upon main frame resize. */
    async setShowViewportSizeOnResize(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Rendering.setShowViewportSizeOnResize', params, (error, result) => {
                this.assertError(error, 'Rendering.setShowViewportSizeOnResize');
                resolve();
            });
        });
    }
}
exports.default = Rendering;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVuZGVyaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vZ2VuZXJhdGVkLXRzL1JlbmRlcmluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVDQUFzQztBQUN0QyxtREFBMkM7QUFvRDNDOzs7R0FHRztBQUNIO0lBR0ksWUFBNkIsR0FBUSxDQUFDLHNCQUFzQjtRQUEvQixRQUFHLEdBQUgsR0FBRyxDQUFLLENBQUMsc0JBQXNCO1FBRnBELFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFBO1FBSS9CLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDekIsTUFBTSxJQUFJLEtBQUssQ0FBQyw0RUFBNEUsQ0FBQyxDQUFBO1FBQ2pHLENBQUM7SUFDTCxDQUFDO0lBRU0sRUFBRSxDQUFDLEtBQWEsRUFBRSxRQUFrQjtRQUN2QyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDbkMsQ0FBQztJQUVNLElBQUksQ0FBQyxLQUFhLEVBQUUsUUFBa0I7UUFDekMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQ25DLENBQUM7SUFFTyxXQUFXLENBQUMsS0FBVSxFQUFFLFdBQW1CO1FBQy9DLEVBQUUsQ0FBQyxDQUFDLFNBQVMsSUFBSSxLQUFLLElBQUksTUFBTSxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDeEMsTUFBTSxJQUFJLHVCQUFhLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFBO1FBQ25FLENBQUM7SUFDTCxDQUFDO0lBRUQsbURBQW1EO0lBQzVDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxNQUEwQztRQUNyRSxNQUFNLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBWSxDQUFDLE9BQU8sRUFBRSxNQUFNO1lBQ2hELElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLDZCQUE2QixFQUFFLE1BQU0sRUFBRSxDQUFDLEtBQVUsRUFBRSxNQUFXO2dCQUNoRixJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSw2QkFBNkIsQ0FBQyxDQUFBO2dCQUN0RCxPQUFPLEVBQUUsQ0FBQTtZQUNiLENBQUMsQ0FBQyxDQUFBO1FBQ04sQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0lBRUQsMERBQTBEO0lBQ25ELEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxNQUE0QztRQUN6RSxNQUFNLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBWSxDQUFDLE9BQU8sRUFBRSxNQUFNO1lBQ2hELElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLCtCQUErQixFQUFFLE1BQU0sRUFBRSxDQUFDLEtBQVUsRUFBRSxNQUFXO2dCQUNsRixJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSwrQkFBK0IsQ0FBQyxDQUFBO2dCQUN4RCxPQUFPLEVBQUUsQ0FBQTtZQUNiLENBQUMsQ0FBQyxDQUFBO1FBQ04sQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0lBRUQsa0RBQWtEO0lBQzNDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxNQUEwQztRQUNyRSxNQUFNLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBWSxDQUFDLE9BQU8sRUFBRSxNQUFNO1lBQ2hELElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLDZCQUE2QixFQUFFLE1BQU0sRUFBRSxDQUFDLEtBQVUsRUFBRSxNQUFXO2dCQUNoRixJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSw2QkFBNkIsQ0FBQyxDQUFBO2dCQUN0RCxPQUFPLEVBQUUsQ0FBQTtZQUNiLENBQUMsQ0FBQyxDQUFBO1FBQ04sQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0lBRUQsMERBQTBEO0lBQ25ELEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxNQUFxRDtRQUMzRixNQUFNLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBWSxDQUFDLE9BQU8sRUFBRSxNQUFNO1lBQ2hELElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLHdDQUF3QyxFQUFFLE1BQU0sRUFBRSxDQUFDLEtBQVUsRUFBRSxNQUFXO2dCQUMzRixJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSx3Q0FBd0MsQ0FBQyxDQUFBO2dCQUNqRSxPQUFPLEVBQUUsQ0FBQTtZQUNiLENBQUMsQ0FBQyxDQUFBO1FBQ04sQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0lBRUQsbURBQW1EO0lBQzVDLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxNQUFvRDtRQUN6RixNQUFNLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBWSxDQUFDLE9BQU8sRUFBRSxNQUFNO1lBQ2hELElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLHVDQUF1QyxFQUFFLE1BQU0sRUFBRSxDQUFDLEtBQVUsRUFBRSxNQUFXO2dCQUMxRixJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSx1Q0FBdUMsQ0FBQyxDQUFBO2dCQUNoRSxPQUFPLEVBQUUsQ0FBQTtZQUNiLENBQUMsQ0FBQyxDQUFBO1FBQ04sQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0NBRUo7QUFFRCxrQkFBZSxTQUFTLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBFdmVudEVtaXR0ZXIgZnJvbSAnZXZlbnRzJ1xuaW1wb3J0IERlYnVnZ2VyRXJyb3IgZnJvbSAnLi9EZWJ1Z2dlckVycm9yJ1xuXG5tb2R1bGUgUmVuZGVyaW5nIHtcbiAgICAvKioqKioqKioqKioqKioqXG4gICAgICoqKiogVHlwZXMgKioqKlxuICAgICAqKioqKioqKioqKioqKi9cblxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgICoqKiogQ29tbWFuZCBQYXJhbWV0ZXJzICoqKipcbiAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICAgIGV4cG9ydCBtb2R1bGUgUGFyYW1zIHtcbiAgICAgICAgLyoqIEBleHBlcmltZW50YWwgKi9cbiAgICAgICAgZXhwb3J0IHR5cGUgc2V0U2hvd1BhaW50UmVjdHMgPSB7XG4gICAgICAgICAgICAvKiogVHJ1ZSBmb3Igc2hvd2luZyBwYWludCByZWN0YW5nbGVzICovXG4gICAgICAgICAgICByZXN1bHQ6IGJvb2xlYW5cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKiBAZXhwZXJpbWVudGFsICovXG4gICAgICAgIGV4cG9ydCB0eXBlIHNldFNob3dEZWJ1Z0JvcmRlcnMgPSB7XG4gICAgICAgICAgICAvKiogVHJ1ZSBmb3Igc2hvd2luZyBkZWJ1ZyBib3JkZXJzICovXG4gICAgICAgICAgICBzaG93OiBib29sZWFuXG4gICAgICAgIH1cblxuICAgICAgICAvKiogQGV4cGVyaW1lbnRhbCAqL1xuICAgICAgICBleHBvcnQgdHlwZSBzZXRTaG93RlBTQ291bnRlciA9IHtcbiAgICAgICAgICAgIC8qKiBUcnVlIGZvciBzaG93aW5nIHRoZSBGUFMgY291bnRlciAqL1xuICAgICAgICAgICAgc2hvdzogYm9vbGVhblxuICAgICAgICB9XG5cbiAgICAgICAgLyoqIEBleHBlcmltZW50YWwgKi9cbiAgICAgICAgZXhwb3J0IHR5cGUgc2V0U2hvd1Njcm9sbEJvdHRsZW5lY2tSZWN0cyA9IHtcbiAgICAgICAgICAgIC8qKiBUcnVlIGZvciBzaG93aW5nIHNjcm9sbCBib3R0bGVuZWNrIHJlY3RzICovXG4gICAgICAgICAgICBzaG93OiBib29sZWFuXG4gICAgICAgIH1cblxuICAgICAgICAvKiogQGV4cGVyaW1lbnRhbCAqL1xuICAgICAgICBleHBvcnQgdHlwZSBzZXRTaG93Vmlld3BvcnRTaXplT25SZXNpemUgPSB7XG4gICAgICAgICAgICAvKiogV2hldGhlciB0byBwYWludCBzaXplIG9yIG5vdC4gKi9cbiAgICAgICAgICAgIHNob3c6IGJvb2xlYW5cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgKioqKiBDb21tYW5kIFJlc3VsdCAqKioqXG4gICAgICoqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgICoqKiogRXZlbnQgUGFyYW1ldGVycyAqKioqXG4gICAgICoqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbn1cblxuLyoqXG4gKiBUaGlzIGRvbWFpbiBhbGxvd3MgdG8gY29udHJvbCByZW5kZXJpbmcgb2YgdGhlIHBhZ2UuXG4gKiBAZXhwZXJpbWVudGFsXG4gKi9cbmNsYXNzIFJlbmRlcmluZyB7XG4gICAgcHJpdmF0ZSBldmVudHMgPSBuZXcgRXZlbnRFbWl0dGVyKClcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZGJnOiBhbnkgLyogRWxlY3Ryb24uRGVidWdnZXIqLyApIHtcblxuICAgICAgICBpZiAoIXRoaXMuZGJnLmlzQXR0YWNoZWQoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgY3JlYXRlIFJlbmRlcmluZyBEb21haW4gQ2xhc3MgYmVjYXVzZSB0aGUgZGVidWdnZXIgaXMgbm90IGF0dGFjaGVkLmApXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgb24oZXZlbnQ6IHN0cmluZywgbGlzdGVuZXI6IEZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzLm9uKGV2ZW50LCBsaXN0ZW5lcilcbiAgICB9XG5cbiAgICBwdWJsaWMgb25jZShldmVudDogc3RyaW5nLCBsaXN0ZW5lcjogRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5ldmVudHMub24oZXZlbnQsIGxpc3RlbmVyKVxuICAgIH1cblxuICAgIHByaXZhdGUgYXNzZXJ0RXJyb3IoZXJyb3I6IGFueSwgY29tbWFuZE5hbWU6IHN0cmluZykge1xuICAgICAgICBpZiAoJ21lc3NhZ2UnIGluIGVycm9yICYmICdjb2RlJyBpbiBlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IERlYnVnZ2VyRXJyb3IoZXJyb3IubWVzc2FnZSwgZXJyb3IuY29kZSwgY29tbWFuZE5hbWUpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogUmVxdWVzdHMgdGhhdCBiYWNrZW5kIHNob3dzIHBhaW50IHJlY3RhbmdsZXMgKi9cbiAgICBwdWJsaWMgYXN5bmMgc2V0U2hvd1BhaW50UmVjdHMocGFyYW1zOiBSZW5kZXJpbmcuUGFyYW1zLnNldFNob3dQYWludFJlY3RzKTogUHJvbWlzZTx1bmRlZmluZWQ+e1xuICAgICAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2U8dW5kZWZpbmVkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRiZy5zZW5kQ29tbWFuZCgnUmVuZGVyaW5nLnNldFNob3dQYWludFJlY3RzJywgcGFyYW1zLCAoZXJyb3I6IGFueSwgcmVzdWx0OiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmFzc2VydEVycm9yKGVycm9yLCAnUmVuZGVyaW5nLnNldFNob3dQYWludFJlY3RzJylcbiAgICAgICAgICAgICAgICByZXNvbHZlKClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgLyoqIFJlcXVlc3RzIHRoYXQgYmFja2VuZCBzaG93cyBkZWJ1ZyBib3JkZXJzIG9uIGxheWVycyAqL1xuICAgIHB1YmxpYyBhc3luYyBzZXRTaG93RGVidWdCb3JkZXJzKHBhcmFtczogUmVuZGVyaW5nLlBhcmFtcy5zZXRTaG93RGVidWdCb3JkZXJzKTogUHJvbWlzZTx1bmRlZmluZWQ+e1xuICAgICAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2U8dW5kZWZpbmVkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRiZy5zZW5kQ29tbWFuZCgnUmVuZGVyaW5nLnNldFNob3dEZWJ1Z0JvcmRlcnMnLCBwYXJhbXMsIChlcnJvcjogYW55LCByZXN1bHQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYXNzZXJ0RXJyb3IoZXJyb3IsICdSZW5kZXJpbmcuc2V0U2hvd0RlYnVnQm9yZGVycycpXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIC8qKiBSZXF1ZXN0cyB0aGF0IGJhY2tlbmQgc2hvd3MgdGhlIEZQUyBjb3VudGVyICovXG4gICAgcHVibGljIGFzeW5jIHNldFNob3dGUFNDb3VudGVyKHBhcmFtczogUmVuZGVyaW5nLlBhcmFtcy5zZXRTaG93RlBTQ291bnRlcik6IFByb21pc2U8dW5kZWZpbmVkPntcbiAgICAgICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlPHVuZGVmaW5lZD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kYmcuc2VuZENvbW1hbmQoJ1JlbmRlcmluZy5zZXRTaG93RlBTQ291bnRlcicsIHBhcmFtcywgKGVycm9yOiBhbnksIHJlc3VsdDogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5hc3NlcnRFcnJvcihlcnJvciwgJ1JlbmRlcmluZy5zZXRTaG93RlBTQ291bnRlcicpXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIC8qKiBSZXF1ZXN0cyB0aGF0IGJhY2tlbmQgc2hvd3Mgc2Nyb2xsIGJvdHRsZW5lY2sgcmVjdHMgKi9cbiAgICBwdWJsaWMgYXN5bmMgc2V0U2hvd1Njcm9sbEJvdHRsZW5lY2tSZWN0cyhwYXJhbXM6IFJlbmRlcmluZy5QYXJhbXMuc2V0U2hvd1Njcm9sbEJvdHRsZW5lY2tSZWN0cyk6IFByb21pc2U8dW5kZWZpbmVkPntcbiAgICAgICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlPHVuZGVmaW5lZD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kYmcuc2VuZENvbW1hbmQoJ1JlbmRlcmluZy5zZXRTaG93U2Nyb2xsQm90dGxlbmVja1JlY3RzJywgcGFyYW1zLCAoZXJyb3I6IGFueSwgcmVzdWx0OiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmFzc2VydEVycm9yKGVycm9yLCAnUmVuZGVyaW5nLnNldFNob3dTY3JvbGxCb3R0bGVuZWNrUmVjdHMnKVxuICAgICAgICAgICAgICAgIHJlc29sdmUoKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvKiogUGFpbnRzIHZpZXdwb3J0IHNpemUgdXBvbiBtYWluIGZyYW1lIHJlc2l6ZS4gKi9cbiAgICBwdWJsaWMgYXN5bmMgc2V0U2hvd1ZpZXdwb3J0U2l6ZU9uUmVzaXplKHBhcmFtczogUmVuZGVyaW5nLlBhcmFtcy5zZXRTaG93Vmlld3BvcnRTaXplT25SZXNpemUpOiBQcm9taXNlPHVuZGVmaW5lZD57XG4gICAgICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZTx1bmRlZmluZWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGJnLnNlbmRDb21tYW5kKCdSZW5kZXJpbmcuc2V0U2hvd1ZpZXdwb3J0U2l6ZU9uUmVzaXplJywgcGFyYW1zLCAoZXJyb3I6IGFueSwgcmVzdWx0OiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmFzc2VydEVycm9yKGVycm9yLCAnUmVuZGVyaW5nLnNldFNob3dWaWV3cG9ydFNpemVPblJlc2l6ZScpXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBSZW5kZXJpbmciXX0=