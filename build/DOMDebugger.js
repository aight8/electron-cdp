"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const DebuggerError_1 = require("./DebuggerError");
/**
 * DOM debugging allows setting breakpoints on particular DOM operations and events. JavaScript execution will stop on these operations as if there was a regular breakpoint set.
 */
class DOMDebugger {
    constructor(dbg /* Electron.Debugger*/) {
        this.dbg = dbg; /* Electron.Debugger*/
        this.events = new EventEmitter();
        if (!this.dbg.isAttached()) {
            throw new Error(`Cannot create DOMDebugger Domain Class because the debugger is not attached.`);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.on(event, listener);
    }
    assertError(error, commandName) {
        if ('message' in error && 'code' in error) {
            throw new DebuggerError_1.default(error.message, error.code, commandName);
        }
    }
    /** Sets breakpoint on particular operation with DOM. */
    async setDOMBreakpoint(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOMDebugger.setDOMBreakpoint', params, (error, result) => {
                this.assertError(error, 'DOMDebugger.setDOMBreakpoint');
                resolve();
            });
        });
    }
    /** Removes DOM breakpoint that was set using <code>setDOMBreakpoint</code>. */
    async removeDOMBreakpoint(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOMDebugger.removeDOMBreakpoint', params, (error, result) => {
                this.assertError(error, 'DOMDebugger.removeDOMBreakpoint');
                resolve();
            });
        });
    }
    /** Sets breakpoint on particular DOM event. */
    async setEventListenerBreakpoint(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOMDebugger.setEventListenerBreakpoint', params, (error, result) => {
                this.assertError(error, 'DOMDebugger.setEventListenerBreakpoint');
                resolve();
            });
        });
    }
    /** Removes breakpoint on particular DOM event. */
    async removeEventListenerBreakpoint(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOMDebugger.removeEventListenerBreakpoint', params, (error, result) => {
                this.assertError(error, 'DOMDebugger.removeEventListenerBreakpoint');
                resolve();
            });
        });
    }
    /**
     * Sets breakpoint on particular native event.
     * @experimental
     */
    async setInstrumentationBreakpoint(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOMDebugger.setInstrumentationBreakpoint', params, (error, result) => {
                this.assertError(error, 'DOMDebugger.setInstrumentationBreakpoint');
                resolve();
            });
        });
    }
    /**
     * Removes breakpoint on particular native event.
     * @experimental
     */
    async removeInstrumentationBreakpoint(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOMDebugger.removeInstrumentationBreakpoint', params, (error, result) => {
                this.assertError(error, 'DOMDebugger.removeInstrumentationBreakpoint');
                resolve();
            });
        });
    }
    /** Sets breakpoint on XMLHttpRequest. */
    async setXHRBreakpoint(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOMDebugger.setXHRBreakpoint', params, (error, result) => {
                this.assertError(error, 'DOMDebugger.setXHRBreakpoint');
                resolve();
            });
        });
    }
    /** Removes breakpoint from XMLHttpRequest. */
    async removeXHRBreakpoint(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOMDebugger.removeXHRBreakpoint', params, (error, result) => {
                this.assertError(error, 'DOMDebugger.removeXHRBreakpoint');
                resolve();
            });
        });
    }
    /**
     * Returns event listeners of the given object.
     * @experimental
     */
    async getEventListeners(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOMDebugger.getEventListeners', params, (error, result) => {
                this.assertError(error, 'DOMDebugger.getEventListeners');
                resolve(result);
            });
        });
    }
}
exports.default = DOMDebugger;
//# sourceMappingURL=data:application/json;base64,