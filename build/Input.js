"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const DebuggerError_1 = require("./DebuggerError");
/**
 * No description
 */
class Input {
    constructor(dbg /* Electron.Debugger*/) {
        this.dbg = dbg; /* Electron.Debugger*/
        this.events = new EventEmitter();
        this.dbg.on('message', (event, method, params) => {
            const [domain, domainMethod] = method.split('.');
            this.events.emit(domainMethod, params);
        });
        if (!this.dbg.isAttached()) {
            throw new Error(`Cannot create Input Domain Class because the debugger is not attached.`);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.on(event, listener);
    }
    assertError(error, commandName) {
        if ('message' in error && 'code' in error) {
            throw new DebuggerError_1.default(error.message, error.code, commandName);
        }
    }
    /** Dispatches a key event to the page. */
    async dispatchKeyEvent(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Input.dispatchKeyEvent', params, (error, result) => {
                this.assertError(error, 'Input.dispatchKeyEvent');
                resolve();
            });
        });
    }
    /** Dispatches a mouse event to the page. */
    async dispatchMouseEvent(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Input.dispatchMouseEvent', params, (error, result) => {
                this.assertError(error, 'Input.dispatchMouseEvent');
                resolve();
            });
        });
    }
    /**
     * Dispatches a touch event to the page.
     * @experimental
     */
    async dispatchTouchEvent(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Input.dispatchTouchEvent', params, (error, result) => {
                this.assertError(error, 'Input.dispatchTouchEvent');
                resolve();
            });
        });
    }
    /**
     * Emulates touch event from the mouse event parameters.
     * @experimental
     */
    async emulateTouchFromMouseEvent(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Input.emulateTouchFromMouseEvent', params, (error, result) => {
                this.assertError(error, 'Input.emulateTouchFromMouseEvent');
                resolve();
            });
        });
    }
    /**
     * Synthesizes a pinch gesture over a time period by issuing appropriate touch events.
     * @experimental
     */
    async synthesizePinchGesture(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Input.synthesizePinchGesture', params, (error, result) => {
                this.assertError(error, 'Input.synthesizePinchGesture');
                resolve();
            });
        });
    }
    /**
     * Synthesizes a scroll gesture over a time period by issuing appropriate touch events.
     * @experimental
     */
    async synthesizeScrollGesture(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Input.synthesizeScrollGesture', params, (error, result) => {
                this.assertError(error, 'Input.synthesizeScrollGesture');
                resolve();
            });
        });
    }
    /**
     * Synthesizes a tap gesture over a time period by issuing appropriate touch events.
     * @experimental
     */
    async synthesizeTapGesture(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Input.synthesizeTapGesture', params, (error, result) => {
                this.assertError(error, 'Input.synthesizeTapGesture');
                resolve();
            });
        });
    }
}
exports.default = Input;
//# sourceMappingURL=data:application/json;base64,