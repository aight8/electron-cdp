"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const DebuggerError_1 = require("./DebuggerError");
/**
 * No description
 */
class Profiler {
    constructor(dbg /* Electron.Debugger*/) {
        this.dbg = dbg; /* Electron.Debugger*/
        this.events = new EventEmitter();
        this.dbg.on('message', (event, method, params) => {
            const [domain, domainMethod] = method.split('.');
            this.events.emit(domainMethod, params);
        });
        if (!this.dbg.isAttached()) {
            throw new Error(`Cannot create Profiler Domain Class because the debugger is not attached.`);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.on(event, listener);
    }
    assertError(error, commandName) {
        if ('message' in error && 'code' in error) {
            throw new DebuggerError_1.default(error.message, error.code, commandName);
        }
    }
    /** No description */
    async enable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Profiler.enable', {}, (error, result) => {
                this.assertError(error, 'Profiler.enable');
                resolve();
            });
        });
    }
    /** No description */
    async disable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Profiler.disable', {}, (error, result) => {
                this.assertError(error, 'Profiler.disable');
                resolve();
            });
        });
    }
    /** Changes CPU profiler sampling interval. Must be called before CPU profiles recording started. */
    async setSamplingInterval(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Profiler.setSamplingInterval', params, (error, result) => {
                this.assertError(error, 'Profiler.setSamplingInterval');
                resolve();
            });
        });
    }
    /** No description */
    async start() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Profiler.start', {}, (error, result) => {
                this.assertError(error, 'Profiler.start');
                resolve();
            });
        });
    }
    /** No description */
    async stop() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Profiler.stop', {}, (error, result) => {
                this.assertError(error, 'Profiler.stop');
                resolve(result);
            });
        });
    }
    /**
     * Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters.
     * @experimental
     */
    async startPreciseCoverage(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Profiler.startPreciseCoverage', params || {}, (error, result) => {
                this.assertError(error, 'Profiler.startPreciseCoverage');
                resolve();
            });
        });
    }
    /**
     * Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code.
     * @experimental
     */
    async stopPreciseCoverage() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Profiler.stopPreciseCoverage', {}, (error, result) => {
                this.assertError(error, 'Profiler.stopPreciseCoverage');
                resolve();
            });
        });
    }
    /**
     * Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started.
     * @experimental
     */
    async takePreciseCoverage() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Profiler.takePreciseCoverage', {}, (error, result) => {
                this.assertError(error, 'Profiler.takePreciseCoverage');
                resolve(result);
            });
        });
    }
    /**
     * Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.
     * @experimental
     */
    async getBestEffortCoverage() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Profiler.getBestEffortCoverage', {}, (error, result) => {
                this.assertError(error, 'Profiler.getBestEffortCoverage');
                resolve(result);
            });
        });
    }
}
exports.default = Profiler;
//# sourceMappingURL=data:application/json;base64,