"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const DebuggerError_1 = require("./DebuggerError");
/**
 * Debugger domain exposes JavaScript debugging capabilities. It allows setting and removing breakpoints, stepping through execution, exploring stack traces, etc.
 */
class Debugger {
    constructor(dbg /* Electron.Debugger*/) {
        this.dbg = dbg; /* Electron.Debugger*/
        this.events = new EventEmitter();
        this.dbg.on('message', (event, method, params) => {
            const [domain, domainMethod] = method.split('.');
            this.events.emit(domainMethod, params);
        });
        if (!this.dbg.isAttached()) {
            throw new Error(`Cannot create Debugger Domain Class because the debugger is not attached.`);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.on(event, listener);
    }
    assertError(error, commandName) {
        if ('message' in error && 'code' in error) {
            throw new DebuggerError_1.default(error.message, error.code, commandName);
        }
    }
    /** Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received. */
    async enable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Debugger.enable', {}, (error, result) => {
                this.assertError(error, 'Debugger.enable');
                resolve();
            });
        });
    }
    /** Disables debugger for given page. */
    async disable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Debugger.disable', {}, (error, result) => {
                this.assertError(error, 'Debugger.disable');
                resolve();
            });
        });
    }
    /** Activates / deactivates all breakpoints on the page. */
    async setBreakpointsActive(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Debugger.setBreakpointsActive', params, (error, result) => {
                this.assertError(error, 'Debugger.setBreakpointsActive');
                resolve();
            });
        });
    }
    /** Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc). */
    async setSkipAllPauses(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Debugger.setSkipAllPauses', params, (error, result) => {
                this.assertError(error, 'Debugger.setSkipAllPauses');
                resolve();
            });
        });
    }
    /** Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads. */
    async setBreakpointByUrl(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Debugger.setBreakpointByUrl', params, (error, result) => {
                this.assertError(error, 'Debugger.setBreakpointByUrl');
                resolve(result);
            });
        });
    }
    /** Sets JavaScript breakpoint at a given location. */
    async setBreakpoint(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Debugger.setBreakpoint', params, (error, result) => {
                this.assertError(error, 'Debugger.setBreakpoint');
                resolve(result);
            });
        });
    }
    /** Removes JavaScript breakpoint. */
    async removeBreakpoint(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Debugger.removeBreakpoint', params, (error, result) => {
                this.assertError(error, 'Debugger.removeBreakpoint');
                resolve();
            });
        });
    }
    /**
     * Returns possible locations for breakpoint. scriptId in start and end range locations should be the same.
     * @experimental
     */
    async getPossibleBreakpoints(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Debugger.getPossibleBreakpoints', params, (error, result) => {
                this.assertError(error, 'Debugger.getPossibleBreakpoints');
                resolve(result);
            });
        });
    }
    /** Continues execution until specific location is reached. */
    async continueToLocation(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Debugger.continueToLocation', params, (error, result) => {
                this.assertError(error, 'Debugger.continueToLocation');
                resolve();
            });
        });
    }
    /** Steps over the statement. */
    async stepOver() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Debugger.stepOver', {}, (error, result) => {
                this.assertError(error, 'Debugger.stepOver');
                resolve();
            });
        });
    }
    /** Steps into the function call. */
    async stepInto() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Debugger.stepInto', {}, (error, result) => {
                this.assertError(error, 'Debugger.stepInto');
                resolve();
            });
        });
    }
    /** Steps out of the function call. */
    async stepOut() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Debugger.stepOut', {}, (error, result) => {
                this.assertError(error, 'Debugger.stepOut');
                resolve();
            });
        });
    }
    /** Stops on the next JavaScript statement. */
    async pause() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Debugger.pause', {}, (error, result) => {
                this.assertError(error, 'Debugger.pause');
                resolve();
            });
        });
    }
    /**
     * Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called.
     * @experimental
     */
    async scheduleStepIntoAsync() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Debugger.scheduleStepIntoAsync', {}, (error, result) => {
                this.assertError(error, 'Debugger.scheduleStepIntoAsync');
                resolve();
            });
        });
    }
    /** Resumes JavaScript execution. */
    async resume() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Debugger.resume', {}, (error, result) => {
                this.assertError(error, 'Debugger.resume');
                resolve();
            });
        });
    }
    /**
     * Searches for given string in script content.
     * @experimental
     */
    async searchInContent(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Debugger.searchInContent', params, (error, result) => {
                this.assertError(error, 'Debugger.searchInContent');
                resolve(result);
            });
        });
    }
    /** Edits JavaScript source live. */
    async setScriptSource(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Debugger.setScriptSource', params, (error, result) => {
                this.assertError(error, 'Debugger.setScriptSource');
                resolve(result);
            });
        });
    }
    /** Restarts particular call frame from the beginning. */
    async restartFrame(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Debugger.restartFrame', params, (error, result) => {
                this.assertError(error, 'Debugger.restartFrame');
                resolve(result);
            });
        });
    }
    /** Returns source for the script with given id. */
    async getScriptSource(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Debugger.getScriptSource', params, (error, result) => {
                this.assertError(error, 'Debugger.getScriptSource');
                resolve(result);
            });
        });
    }
    /** Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>. */
    async setPauseOnExceptions(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Debugger.setPauseOnExceptions', params, (error, result) => {
                this.assertError(error, 'Debugger.setPauseOnExceptions');
                resolve();
            });
        });
    }
    /** Evaluates expression on a given call frame. */
    async evaluateOnCallFrame(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Debugger.evaluateOnCallFrame', params, (error, result) => {
                this.assertError(error, 'Debugger.evaluateOnCallFrame');
                resolve(result);
            });
        });
    }
    /** Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually. */
    async setVariableValue(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Debugger.setVariableValue', params, (error, result) => {
                this.assertError(error, 'Debugger.setVariableValue');
                resolve();
            });
        });
    }
    /** Enables or disables async call stacks tracking. */
    async setAsyncCallStackDepth(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Debugger.setAsyncCallStackDepth', params, (error, result) => {
                this.assertError(error, 'Debugger.setAsyncCallStackDepth');
                resolve();
            });
        });
    }
    /**
     * Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful.
     * @experimental
     */
    async setBlackboxPatterns(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Debugger.setBlackboxPatterns', params, (error, result) => {
                this.assertError(error, 'Debugger.setBlackboxPatterns');
                resolve();
            });
        });
    }
    /**
     * Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted.
     * @experimental
     */
    async setBlackboxedRanges(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Debugger.setBlackboxedRanges', params, (error, result) => {
                this.assertError(error, 'Debugger.setBlackboxedRanges');
                resolve();
            });
        });
    }
}
exports.default = Debugger;
//# sourceMappingURL=data:application/json;base64,