"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const DebuggerError_1 = require("./DebuggerError");
/**
 * Security
 * @experimental
 */
class Security {
    constructor(dbg /* Electron.Debugger*/) {
        this.dbg = dbg; /* Electron.Debugger*/
        this.events = new EventEmitter();
        this.dbg.on('message', (event, method, params) => {
            const [domain, domainMethod] = method.split('.');
            this.events.emit(domainMethod, params);
        });
        if (!this.dbg.isAttached()) {
            throw new Error(`Cannot create Security Domain Class because the debugger is not attached.`);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.on(event, listener);
    }
    assertError(error, commandName) {
        if ('message' in error && 'code' in error) {
            throw new DebuggerError_1.default(error.message, error.code, commandName);
        }
    }
    /** Enables tracking security state changes. */
    async enable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Security.enable', {}, (error, result) => {
                this.assertError(error, 'Security.enable');
                resolve();
            });
        });
    }
    /** Disables tracking security state changes. */
    async disable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Security.disable', {}, (error, result) => {
                this.assertError(error, 'Security.disable');
                resolve();
            });
        });
    }
    /** Displays native dialog with the certificate details. */
    async showCertificateViewer() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Security.showCertificateViewer', {}, (error, result) => {
                this.assertError(error, 'Security.showCertificateViewer');
                resolve();
            });
        });
    }
    /** Handles a certificate error that fired a certificateError event. */
    async handleCertificateError(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Security.handleCertificateError', params, (error, result) => {
                this.assertError(error, 'Security.handleCertificateError');
                resolve();
            });
        });
    }
    /** Enable/disable overriding certificate errors. If enabled, all certificate error events need to be handled by the DevTools client and should be answered with handleCertificateError commands. */
    async setOverrideCertificateErrors(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Security.setOverrideCertificateErrors', params, (error, result) => {
                this.assertError(error, 'Security.setOverrideCertificateErrors');
                resolve();
            });
        });
    }
}
exports.default = Security;
//# sourceMappingURL=data:application/json;base64,