"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const DebuggerError_1 = require("./DebuggerError");
/**
 * No description
 * @experimental
 */
class CacheStorage {
    constructor(dbg /* Electron.Debugger*/) {
        this.dbg = dbg; /* Electron.Debugger*/
        this.events = new EventEmitter();
        if (!this.dbg.isAttached()) {
            throw new Error(`Cannot create CacheStorage Domain Class because the debugger is not attached.`);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.on(event, listener);
    }
    assertError(error, commandName) {
        if ('message' in error && 'code' in error) {
            throw new DebuggerError_1.default(error.message, error.code, commandName);
        }
    }
    /** Requests cache names. */
    async requestCacheNames(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('CacheStorage.requestCacheNames', params, (error, result) => {
                this.assertError(error, 'CacheStorage.requestCacheNames');
                resolve(result);
            });
        });
    }
    /** Requests data from cache. */
    async requestEntries(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('CacheStorage.requestEntries', params, (error, result) => {
                this.assertError(error, 'CacheStorage.requestEntries');
                resolve(result);
            });
        });
    }
    /** Deletes a cache. */
    async deleteCache(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('CacheStorage.deleteCache', params, (error, result) => {
                this.assertError(error, 'CacheStorage.deleteCache');
                resolve();
            });
        });
    }
    /** Deletes a cache entry. */
    async deleteEntry(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('CacheStorage.deleteEntry', params, (error, result) => {
                this.assertError(error, 'CacheStorage.deleteEntry');
                resolve();
            });
        });
    }
}
exports.default = CacheStorage;
//# sourceMappingURL=data:application/json;base64,