"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const DebuggerError_1 = require("./DebuggerError");
/**
 * Runtime domain exposes JavaScript runtime by means of remote evaluation and mirror objects. Evaluation results are returned as mirror object that expose object type, string representation and unique identifier that can be used for further object reference. Original objects are maintained in memory unless they are either explicitly released or are released along with the other objects in their object group.
 */
class Runtime {
    constructor(dbg /* Electron.Debugger*/) {
        this.dbg = dbg; /* Electron.Debugger*/
        this.events = new EventEmitter();
        this.dbg.on('message', (event, method, params) => {
            const [domain, domainMethod] = method.split('.');
            this.events.emit(domainMethod, params);
        });
        if (!this.dbg.isAttached()) {
            throw new Error(`Cannot create Runtime Domain Class because the debugger is not attached.`);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.on(event, listener);
    }
    assertError(error, commandName) {
        if ('message' in error && 'code' in error) {
            throw new DebuggerError_1.default(error.message, error.code, commandName);
        }
    }
    /** Evaluates expression on global object. */
    async evaluate(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Runtime.evaluate', params, (error, result) => {
                this.assertError(error, 'Runtime.evaluate');
                resolve(result);
            });
        });
    }
    /** Add handler to promise with given promise object id. */
    async awaitPromise(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Runtime.awaitPromise', params, (error, result) => {
                this.assertError(error, 'Runtime.awaitPromise');
                resolve(result);
            });
        });
    }
    /** Calls function with given declaration on the given object. Object group of the result is inherited from the target object. */
    async callFunctionOn(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Runtime.callFunctionOn', params, (error, result) => {
                this.assertError(error, 'Runtime.callFunctionOn');
                resolve(result);
            });
        });
    }
    /** Returns properties of a given object. Object group of the result is inherited from the target object. */
    async getProperties(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Runtime.getProperties', params, (error, result) => {
                this.assertError(error, 'Runtime.getProperties');
                resolve(result);
            });
        });
    }
    /** Releases remote object with given id. */
    async releaseObject(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Runtime.releaseObject', params, (error, result) => {
                this.assertError(error, 'Runtime.releaseObject');
                resolve();
            });
        });
    }
    /** Releases all remote objects that belong to a given group. */
    async releaseObjectGroup(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Runtime.releaseObjectGroup', params, (error, result) => {
                this.assertError(error, 'Runtime.releaseObjectGroup');
                resolve();
            });
        });
    }
    /** Tells inspected instance to run if it was waiting for debugger to attach. */
    async runIfWaitingForDebugger() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Runtime.runIfWaitingForDebugger', {}, (error, result) => {
                this.assertError(error, 'Runtime.runIfWaitingForDebugger');
                resolve();
            });
        });
    }
    /** Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context. */
    async enable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Runtime.enable', {}, (error, result) => {
                this.assertError(error, 'Runtime.enable');
                resolve();
            });
        });
    }
    /** Disables reporting of execution contexts creation. */
    async disable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Runtime.disable', {}, (error, result) => {
                this.assertError(error, 'Runtime.disable');
                resolve();
            });
        });
    }
    /** Discards collected exceptions and console API calls. */
    async discardConsoleEntries() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Runtime.discardConsoleEntries', {}, (error, result) => {
                this.assertError(error, 'Runtime.discardConsoleEntries');
                resolve();
            });
        });
    }
    /**
     * No description
     * @experimental
     */
    async setCustomObjectFormatterEnabled(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Runtime.setCustomObjectFormatterEnabled', params, (error, result) => {
                this.assertError(error, 'Runtime.setCustomObjectFormatterEnabled');
                resolve();
            });
        });
    }
    /** Compiles expression. */
    async compileScript(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Runtime.compileScript', params, (error, result) => {
                this.assertError(error, 'Runtime.compileScript');
                resolve(result);
            });
        });
    }
    /** Runs script with given id in a given context. */
    async runScript(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Runtime.runScript', params, (error, result) => {
                this.assertError(error, 'Runtime.runScript');
                resolve(result);
            });
        });
    }
}
exports.default = Runtime;
//# sourceMappingURL=data:application/json;base64,