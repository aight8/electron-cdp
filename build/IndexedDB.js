"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const DebuggerError_1 = require("./DebuggerError");
/**
 * No description
 * @experimental
 */
class IndexedDB {
    constructor(dbg /* Electron.Debugger*/) {
        this.dbg = dbg; /* Electron.Debugger*/
        this.events = new EventEmitter();
        if (!this.dbg.isAttached()) {
            throw new Error(`Cannot create IndexedDB Domain Class because the debugger is not attached.`);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.on(event, listener);
    }
    assertError(error, commandName) {
        if ('message' in error && 'code' in error) {
            throw new DebuggerError_1.default(error.message, error.code, commandName);
        }
    }
    /** Enables events from backend. */
    async enable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('IndexedDB.enable', {}, (error, result) => {
                this.assertError(error, 'IndexedDB.enable');
                resolve();
            });
        });
    }
    /** Disables events from backend. */
    async disable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('IndexedDB.disable', {}, (error, result) => {
                this.assertError(error, 'IndexedDB.disable');
                resolve();
            });
        });
    }
    /** Requests database names for given security origin. */
    async requestDatabaseNames(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('IndexedDB.requestDatabaseNames', params, (error, result) => {
                this.assertError(error, 'IndexedDB.requestDatabaseNames');
                resolve(result);
            });
        });
    }
    /** Requests database with given name in given frame. */
    async requestDatabase(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('IndexedDB.requestDatabase', params, (error, result) => {
                this.assertError(error, 'IndexedDB.requestDatabase');
                resolve(result);
            });
        });
    }
    /** Requests data from object store or index. */
    async requestData(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('IndexedDB.requestData', params, (error, result) => {
                this.assertError(error, 'IndexedDB.requestData');
                resolve(result);
            });
        });
    }
    /** Clears all entries from an object store. */
    async clearObjectStore(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('IndexedDB.clearObjectStore', params, (error, result) => {
                this.assertError(error, 'IndexedDB.clearObjectStore');
                resolve(result);
            });
        });
    }
    /** Deletes a database. */
    async deleteDatabase(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('IndexedDB.deleteDatabase', params, (error, result) => {
                this.assertError(error, 'IndexedDB.deleteDatabase');
                resolve(result);
            });
        });
    }
}
exports.default = IndexedDB;
//# sourceMappingURL=data:application/json;base64,