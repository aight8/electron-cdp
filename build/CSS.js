"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const DebuggerError_1 = require("./DebuggerError");
/**
 * This domain exposes CSS read/write operations. All CSS objects (stylesheets, rules, and styles) have an associated <code>id</code> used in subsequent operations on the related object. Each object type has a specific <code>id</code> structure, and those are not interchangeable between objects of different kinds. CSS objects can be loaded using the <code>get*ForNode()</code> calls (which accept a DOM node id). A client can also discover all the existing stylesheets with the <code>getAllStyleSheets()</code> method (or keeping track of the <code>styleSheetAdded</code>/<code>styleSheetRemoved</code> events) and subsequently load the required stylesheet contents using the <code>getStyleSheet[Text]()</code> methods.
 * @experimental
 */
class CSS {
    constructor(dbg /* Electron.Debugger*/) {
        this.dbg = dbg; /* Electron.Debugger*/
        this.events = new EventEmitter();
        this.dbg.on('message', (event, method, params) => {
            const [domain, domainMethod] = method.split('.');
            this.events.emit(domainMethod, params);
        });
        if (!this.dbg.isAttached()) {
            throw new Error(`Cannot create CSS Domain Class because the debugger is not attached.`);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.on(event, listener);
    }
    assertError(error, commandName) {
        if ('message' in error && 'code' in error) {
            throw new DebuggerError_1.default(error.message, error.code, commandName);
        }
    }
    /** Enables the CSS agent for the given page. Clients should not assume that the CSS agent has been enabled until the result of this command is received. */
    async enable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('CSS.enable', {}, (error, result) => {
                this.assertError(error, 'CSS.enable');
                resolve();
            });
        });
    }
    /** Disables the CSS agent for the given page. */
    async disable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('CSS.disable', {}, (error, result) => {
                this.assertError(error, 'CSS.disable');
                resolve();
            });
        });
    }
    /** Returns requested styles for a DOM node identified by <code>nodeId</code>. */
    async getMatchedStylesForNode(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('CSS.getMatchedStylesForNode', params, (error, result) => {
                this.assertError(error, 'CSS.getMatchedStylesForNode');
                resolve(result);
            });
        });
    }
    /** Returns the styles defined inline (explicitly in the "style" attribute and implicitly, using DOM attributes) for a DOM node identified by <code>nodeId</code>. */
    async getInlineStylesForNode(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('CSS.getInlineStylesForNode', params, (error, result) => {
                this.assertError(error, 'CSS.getInlineStylesForNode');
                resolve(result);
            });
        });
    }
    /** Returns the computed style for a DOM node identified by <code>nodeId</code>. */
    async getComputedStyleForNode(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('CSS.getComputedStyleForNode', params, (error, result) => {
                this.assertError(error, 'CSS.getComputedStyleForNode');
                resolve(result);
            });
        });
    }
    /**
     * Requests information about platform fonts which we used to render child TextNodes in the given node.
     * @experimental
     */
    async getPlatformFontsForNode(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('CSS.getPlatformFontsForNode', params, (error, result) => {
                this.assertError(error, 'CSS.getPlatformFontsForNode');
                resolve(result);
            });
        });
    }
    /** Returns the current textual content and the URL for a stylesheet. */
    async getStyleSheetText(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('CSS.getStyleSheetText', params, (error, result) => {
                this.assertError(error, 'CSS.getStyleSheetText');
                resolve(result);
            });
        });
    }
    /**
     * Returns all class names from specified stylesheet.
     * @experimental
     */
    async collectClassNames(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('CSS.collectClassNames', params, (error, result) => {
                this.assertError(error, 'CSS.collectClassNames');
                resolve(result);
            });
        });
    }
    /** Sets the new stylesheet text. */
    async setStyleSheetText(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('CSS.setStyleSheetText', params, (error, result) => {
                this.assertError(error, 'CSS.setStyleSheetText');
                resolve(result);
            });
        });
    }
    /** Modifies the rule selector. */
    async setRuleSelector(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('CSS.setRuleSelector', params, (error, result) => {
                this.assertError(error, 'CSS.setRuleSelector');
                resolve(result);
            });
        });
    }
    /** Modifies the keyframe rule key text. */
    async setKeyframeKey(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('CSS.setKeyframeKey', params, (error, result) => {
                this.assertError(error, 'CSS.setKeyframeKey');
                resolve(result);
            });
        });
    }
    /** Applies specified style edits one after another in the given order. */
    async setStyleTexts(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('CSS.setStyleTexts', params, (error, result) => {
                this.assertError(error, 'CSS.setStyleTexts');
                resolve(result);
            });
        });
    }
    /** Modifies the rule selector. */
    async setMediaText(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('CSS.setMediaText', params, (error, result) => {
                this.assertError(error, 'CSS.setMediaText');
                resolve(result);
            });
        });
    }
    /** Creates a new special "via-inspector" stylesheet in the frame with given <code>frameId</code>. */
    async createStyleSheet(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('CSS.createStyleSheet', params, (error, result) => {
                this.assertError(error, 'CSS.createStyleSheet');
                resolve(result);
            });
        });
    }
    /** Inserts a new rule with the given <code>ruleText</code> in a stylesheet with given <code>styleSheetId</code>, at the position specified by <code>location</code>. */
    async addRule(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('CSS.addRule', params, (error, result) => {
                this.assertError(error, 'CSS.addRule');
                resolve(result);
            });
        });
    }
    /** Ensures that the given node will have specified pseudo-classes whenever its style is computed by the browser. */
    async forcePseudoState(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('CSS.forcePseudoState', params, (error, result) => {
                this.assertError(error, 'CSS.forcePseudoState');
                resolve();
            });
        });
    }
    /**
     * Returns all media queries parsed by the rendering engine.
     * @experimental
     */
    async getMediaQueries() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('CSS.getMediaQueries', {}, (error, result) => {
                this.assertError(error, 'CSS.getMediaQueries');
                resolve(result);
            });
        });
    }
    /**
     * Find a rule with the given active property for the given node and set the new value for this property
     * @experimental
     */
    async setEffectivePropertyValueForNode(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('CSS.setEffectivePropertyValueForNode', params, (error, result) => {
                this.assertError(error, 'CSS.setEffectivePropertyValueForNode');
                resolve();
            });
        });
    }
    /**
     * No description
     * @experimental
     */
    async getBackgroundColors(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('CSS.getBackgroundColors', params, (error, result) => {
                this.assertError(error, 'CSS.getBackgroundColors');
                resolve(result);
            });
        });
    }
    /**
     * For the main document and any content documents, return the LayoutTreeNodes and a whitelisted subset of the computed style. It only returns pushed nodes, on way to pull all nodes is to call DOM.getDocument with a depth of -1.
     * @experimental
     */
    async getLayoutTreeAndStyles(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('CSS.getLayoutTreeAndStyles', params, (error, result) => {
                this.assertError(error, 'CSS.getLayoutTreeAndStyles');
                resolve(result);
            });
        });
    }
    /**
     * Enables the selector recording.
     * @experimental
     */
    async startRuleUsageTracking() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('CSS.startRuleUsageTracking', {}, (error, result) => {
                this.assertError(error, 'CSS.startRuleUsageTracking');
                resolve();
            });
        });
    }
    /**
     * Obtain list of rules that became used since last call to this method (or since start of coverage instrumentation)
     * @experimental
     */
    async takeCoverageDelta() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('CSS.takeCoverageDelta', {}, (error, result) => {
                this.assertError(error, 'CSS.takeCoverageDelta');
                resolve(result);
            });
        });
    }
    /**
     * The list of rules with an indication of whether these were used
     * @experimental
     */
    async stopRuleUsageTracking() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('CSS.stopRuleUsageTracking', {}, (error, result) => {
                this.assertError(error, 'CSS.stopRuleUsageTracking');
                resolve(result);
            });
        });
    }
}
exports.default = CSS;
//# sourceMappingURL=data:application/json;base64,