"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const DebuggerError_1 = require("./DebuggerError");
/**
 * No description
 * @experimental
 */
class Tracing {
    constructor(dbg /* Electron.Debugger*/) {
        this.dbg = dbg; /* Electron.Debugger*/
        this.events = new EventEmitter();
        this.dbg.on('message', (event, method, params) => {
            const [domain, domainMethod] = method.split('.');
            this.events.emit(domainMethod, params);
        });
        if (!this.dbg.isAttached()) {
            throw new Error(`Cannot create Tracing Domain Class because the debugger is not attached.`);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.on(event, listener);
    }
    assertError(error, commandName) {
        if ('message' in error && 'code' in error) {
            throw new DebuggerError_1.default(error.message, error.code, commandName);
        }
    }
    /** Start trace events collection. */
    async start(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Tracing.start', params || {}, (error, result) => {
                this.assertError(error, 'Tracing.start');
                resolve();
            });
        });
    }
    /** Stop trace events collection. */
    async end() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Tracing.end', {}, (error, result) => {
                this.assertError(error, 'Tracing.end');
                resolve();
            });
        });
    }
    /** Gets supported tracing categories. */
    async getCategories() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Tracing.getCategories', {}, (error, result) => {
                this.assertError(error, 'Tracing.getCategories');
                resolve(result);
            });
        });
    }
    /** Request a global memory dump. */
    async requestMemoryDump() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Tracing.requestMemoryDump', {}, (error, result) => {
                this.assertError(error, 'Tracing.requestMemoryDump');
                resolve(result);
            });
        });
    }
    /** Record a clock sync marker in the trace. */
    async recordClockSyncMarker(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Tracing.recordClockSyncMarker', params, (error, result) => {
                this.assertError(error, 'Tracing.recordClockSyncMarker');
                resolve();
            });
        });
    }
}
exports.default = Tracing;
//# sourceMappingURL=data:application/json;base64,