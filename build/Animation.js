"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const DebuggerError_1 = require("./DebuggerError");
/**
 * No description
 * @experimental
 */
class Animation {
    constructor(dbg /* Electron.Debugger*/) {
        this.dbg = dbg; /* Electron.Debugger*/
        this.events = new EventEmitter();
        this.dbg.on('message', (event, method, params) => {
            const [domain, domainMethod] = method.split('.');
            this.events.emit(domainMethod, params);
        });
        if (!this.dbg.isAttached()) {
            throw new Error(`Cannot create Animation Domain Class because the debugger is not attached.`);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.on(event, listener);
    }
    assertError(error, commandName) {
        if ('message' in error && 'code' in error) {
            throw new DebuggerError_1.default(error.message, error.code, commandName);
        }
    }
    /** Enables animation domain notifications. */
    async enable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Animation.enable', {}, (error, result) => {
                this.assertError(error, 'Animation.enable');
                resolve();
            });
        });
    }
    /** Disables animation domain notifications. */
    async disable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Animation.disable', {}, (error, result) => {
                this.assertError(error, 'Animation.disable');
                resolve();
            });
        });
    }
    /** Gets the playback rate of the document timeline. */
    async getPlaybackRate() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Animation.getPlaybackRate', {}, (error, result) => {
                this.assertError(error, 'Animation.getPlaybackRate');
                resolve(result);
            });
        });
    }
    /** Sets the playback rate of the document timeline. */
    async setPlaybackRate(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Animation.setPlaybackRate', params, (error, result) => {
                this.assertError(error, 'Animation.setPlaybackRate');
                resolve();
            });
        });
    }
    /** Returns the current time of the an animation. */
    async getCurrentTime(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Animation.getCurrentTime', params, (error, result) => {
                this.assertError(error, 'Animation.getCurrentTime');
                resolve(result);
            });
        });
    }
    /** Sets the paused state of a set of animations. */
    async setPaused(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Animation.setPaused', params, (error, result) => {
                this.assertError(error, 'Animation.setPaused');
                resolve();
            });
        });
    }
    /** Sets the timing of an animation node. */
    async setTiming(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Animation.setTiming', params, (error, result) => {
                this.assertError(error, 'Animation.setTiming');
                resolve();
            });
        });
    }
    /** Seek a set of animations to a particular time within each animation. */
    async seekAnimations(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Animation.seekAnimations', params, (error, result) => {
                this.assertError(error, 'Animation.seekAnimations');
                resolve();
            });
        });
    }
    /** Releases a set of animations to no longer be manipulated. */
    async releaseAnimations(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Animation.releaseAnimations', params, (error, result) => {
                this.assertError(error, 'Animation.releaseAnimations');
                resolve();
            });
        });
    }
    /** Gets the remote object of the Animation. */
    async resolveAnimation(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Animation.resolveAnimation', params, (error, result) => {
                this.assertError(error, 'Animation.resolveAnimation');
                resolve(result);
            });
        });
    }
}
exports.default = Animation;
//# sourceMappingURL=data:application/json;base64,