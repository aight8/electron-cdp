"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const DebuggerError_1 = require("./DebuggerError");
/**
 * Supports additional targets discovery and allows to attach to them.
 * @experimental
 */
class Target {
    constructor(dbg /* Electron.Debugger*/) {
        this.dbg = dbg; /* Electron.Debugger*/
        this.events = new EventEmitter();
        this.dbg.on('message', (event, method, params) => {
            const [domain, domainMethod] = method.split('.');
            this.events.emit(domainMethod, params);
        });
        if (!this.dbg.isAttached()) {
            throw new Error(`Cannot create Target Domain Class because the debugger is not attached.`);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.on(event, listener);
    }
    assertError(error, commandName) {
        if ('message' in error && 'code' in error) {
            throw new DebuggerError_1.default(error.message, error.code, commandName);
        }
    }
    /** Controls whether to discover available targets and notify via <code>targetCreated/targetDestroyed</code> events. */
    async setDiscoverTargets(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Target.setDiscoverTargets', params, (error, result) => {
                this.assertError(error, 'Target.setDiscoverTargets');
                resolve();
            });
        });
    }
    /** Controls whether to automatically attach to new targets which are considered to be related to this one. When turned on, attaches to all existing related targets as well. When turned off, automatically detaches from all currently attached targets. */
    async setAutoAttach(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Target.setAutoAttach', params, (error, result) => {
                this.assertError(error, 'Target.setAutoAttach');
                resolve();
            });
        });
    }
    /** No description */
    async setAttachToFrames(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Target.setAttachToFrames', params, (error, result) => {
                this.assertError(error, 'Target.setAttachToFrames');
                resolve();
            });
        });
    }
    /** Enables target discovery for the specified locations, when <code>setDiscoverTargets</code> was set to <code>true</code>. */
    async setRemoteLocations(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Target.setRemoteLocations', params, (error, result) => {
                this.assertError(error, 'Target.setRemoteLocations');
                resolve();
            });
        });
    }
    /** Sends protocol message to the target with given id. */
    async sendMessageToTarget(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Target.sendMessageToTarget', params, (error, result) => {
                this.assertError(error, 'Target.sendMessageToTarget');
                resolve();
            });
        });
    }
    /** Returns information about a target. */
    async getTargetInfo(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Target.getTargetInfo', params, (error, result) => {
                this.assertError(error, 'Target.getTargetInfo');
                resolve(result);
            });
        });
    }
    /** Activates (focuses) the target. */
    async activateTarget(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Target.activateTarget', params, (error, result) => {
                this.assertError(error, 'Target.activateTarget');
                resolve();
            });
        });
    }
    /** Closes the target. If the target is a page that gets closed too. */
    async closeTarget(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Target.closeTarget', params, (error, result) => {
                this.assertError(error, 'Target.closeTarget');
                resolve(result);
            });
        });
    }
    /** Attaches to the target with given id. */
    async attachToTarget(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Target.attachToTarget', params, (error, result) => {
                this.assertError(error, 'Target.attachToTarget');
                resolve(result);
            });
        });
    }
    /** Detaches from the target with given id. */
    async detachFromTarget(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Target.detachFromTarget', params, (error, result) => {
                this.assertError(error, 'Target.detachFromTarget');
                resolve();
            });
        });
    }
    /** Creates a new empty BrowserContext. Similar to an incognito profile but you can have more than one. */
    async createBrowserContext() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Target.createBrowserContext', {}, (error, result) => {
                this.assertError(error, 'Target.createBrowserContext');
                resolve(result);
            });
        });
    }
    /** Deletes a BrowserContext, will fail of any open page uses it. */
    async disposeBrowserContext(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Target.disposeBrowserContext', params, (error, result) => {
                this.assertError(error, 'Target.disposeBrowserContext');
                resolve(result);
            });
        });
    }
    /** Creates a new page. */
    async createTarget(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Target.createTarget', params, (error, result) => {
                this.assertError(error, 'Target.createTarget');
                resolve(result);
            });
        });
    }
    /** Retrieves a list of available targets. */
    async getTargets() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Target.getTargets', {}, (error, result) => {
                this.assertError(error, 'Target.getTargets');
                resolve(result);
            });
        });
    }
}
exports.default = Target;
//# sourceMappingURL=data:application/json;base64,