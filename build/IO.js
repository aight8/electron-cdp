"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const DebuggerError_1 = require("./DebuggerError");
/**
 * Input/Output operations for streams produced by DevTools.
 * @experimental
 */
class IO {
    constructor(dbg /* Electron.Debugger*/) {
        this.dbg = dbg; /* Electron.Debugger*/
        this.events = new EventEmitter();
        if (!this.dbg.isAttached()) {
            throw new Error(`Cannot create IO Domain Class because the debugger is not attached.`);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.on(event, listener);
    }
    assertError(error, commandName) {
        if ('message' in error && 'code' in error) {
            throw new DebuggerError_1.default(error.message, error.code, commandName);
        }
    }
    /** Read a chunk of the stream */
    async read(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('IO.read', params, (error, result) => {
                this.assertError(error, 'IO.read');
                resolve(result);
            });
        });
    }
    /** Close the stream, discard any temporary backing storage. */
    async close(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('IO.close', params, (error, result) => {
                this.assertError(error, 'IO.close');
                resolve();
            });
        });
    }
}
exports.default = IO;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSU8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9nZW5lcmF0ZWQtdHMvSU8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx1Q0FBc0M7QUFDdEMsbURBQTJDO0FBMkQzQzs7O0dBR0c7QUFDSDtJQUdJLFlBQTZCLEdBQVEsQ0FBQyxzQkFBc0I7UUFBL0IsUUFBRyxHQUFILEdBQUcsQ0FBSyxDQUFDLHNCQUFzQjtRQUZwRCxXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQTtRQUkvQixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQUMscUVBQXFFLENBQUMsQ0FBQTtRQUMxRixDQUFDO0lBQ0wsQ0FBQztJQUVNLEVBQUUsQ0FBQyxLQUFhLEVBQUUsUUFBa0I7UUFDdkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQ25DLENBQUM7SUFFTSxJQUFJLENBQUMsS0FBYSxFQUFFLFFBQWtCO1FBQ3pDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUNuQyxDQUFDO0lBRU8sV0FBVyxDQUFDLEtBQVUsRUFBRSxXQUFtQjtRQUMvQyxFQUFFLENBQUMsQ0FBQyxTQUFTLElBQUksS0FBSyxJQUFJLE1BQU0sSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLE1BQU0sSUFBSSx1QkFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQTtRQUNuRSxDQUFDO0lBQ0wsQ0FBQztJQUVELGlDQUFpQztJQUMxQixLQUFLLENBQUMsSUFBSSxDQUFDLE1BQXNCO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFpQixDQUFDLE9BQU8sRUFBRSxNQUFNO1lBQ3JELElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFVLEVBQUUsTUFBVztnQkFDNUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUE7Z0JBQ2xDLE9BQU8sQ0FBQyxNQUF3QixDQUFDLENBQUE7WUFDckMsQ0FBQyxDQUFDLENBQUE7UUFDTixDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUM7SUFFRCwrREFBK0Q7SUFDeEQsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUF1QjtRQUN0QyxNQUFNLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBWSxDQUFDLE9BQU8sRUFBRSxNQUFNO1lBQ2hELElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxLQUFVLEVBQUUsTUFBVztnQkFDN0QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUE7Z0JBQ25DLE9BQU8sRUFBRSxDQUFBO1lBQ2IsQ0FBQyxDQUFDLENBQUE7UUFDTixDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUM7Q0FFSjtBQUVELGtCQUFlLEVBQUUsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEV2ZW50RW1pdHRlciBmcm9tICdldmVudHMnXG5pbXBvcnQgRGVidWdnZXJFcnJvciBmcm9tICcuL0RlYnVnZ2VyRXJyb3InXG5cbm1vZHVsZSBJTyB7XG4gICAgLyoqKioqKioqKioqKioqKlxuICAgICAqKioqIFR5cGVzICoqKipcbiAgICAgKioqKioqKioqKioqKiovXG5cbiAgICAvKiogQGV4cGVyaW1lbnRhbCAqL1xuICAgIGV4cG9ydCB0eXBlIFN0cmVhbUhhbmRsZSA9IHN0cmluZ1xuXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgKioqKiBDb21tYW5kIFBhcmFtZXRlcnMgKioqKlxuICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgZXhwb3J0IG1vZHVsZSBQYXJhbXMge1xuICAgICAgICAvKiogQGV4cGVyaW1lbnRhbCAqL1xuICAgICAgICBleHBvcnQgdHlwZSByZWFkID0ge1xuICAgICAgICAgICAgLyoqIEhhbmRsZSBvZiB0aGUgc3RyZWFtIHRvIHJlYWQuICovXG4gICAgICAgICAgICBoYW5kbGU6IFN0cmVhbUhhbmRsZVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNlZWsgdG8gdGhlIHNwZWNpZmllZCBvZmZzZXQgYmVmb3JlIHJlYWRpbmcgKGlmIG5vdCBzcGVjaWZpY2VkLCBwcm9jZWVkIHdpdGggb2Zmc2V0IGZvbGxvd2luZyB0aGUgbGFzdCByZWFkKS5cbiAgICAgICAgICAgICAqIEBvcHRpb25hbFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBvZmZzZXQ/OiBudW1iZXJcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBNYXhpbXVtIG51bWJlciBvZiBieXRlcyB0byByZWFkIChsZWZ0IHVwb24gdGhlIGFnZW50IGRpc2NyZXRpb24gaWYgbm90IHNwZWNpZmllZCkuXG4gICAgICAgICAgICAgKiBAb3B0aW9uYWxcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgc2l6ZT86IG51bWJlclxuICAgICAgICB9XG5cbiAgICAgICAgLyoqIEBleHBlcmltZW50YWwgKi9cbiAgICAgICAgZXhwb3J0IHR5cGUgY2xvc2UgPSB7XG4gICAgICAgICAgICAvKiogSGFuZGxlIG9mIHRoZSBzdHJlYW0gdG8gY2xvc2UuICovXG4gICAgICAgICAgICBoYW5kbGU6IFN0cmVhbUhhbmRsZVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICAqKioqIENvbW1hbmQgUmVzdWx0ICoqKipcbiAgICAgKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgZXhwb3J0IG1vZHVsZSBSZXN1bHQge1xuICAgICAgICAvKiogQGV4cGVyaW1lbnRhbCAqL1xuICAgICAgICBleHBvcnQgdHlwZSByZWFkID0ge1xuICAgICAgICAgICAgLyoqIERhdGEgdGhhdCB3ZXJlIHJlYWQuICovXG4gICAgICAgICAgICBkYXRhOiBzdHJpbmdcblxuICAgICAgICAgICAgLyoqIFNldCBpZiB0aGUgZW5kLW9mLWZpbGUgY29uZGl0aW9uIG9jY3VyZWQgd2hpbGUgcmVhZGluZy4gKi9cbiAgICAgICAgICAgIGVvZjogYm9vbGVhblxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgICoqKiogRXZlbnQgUGFyYW1ldGVycyAqKioqXG4gICAgICoqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbn1cblxuLyoqXG4gKiBJbnB1dC9PdXRwdXQgb3BlcmF0aW9ucyBmb3Igc3RyZWFtcyBwcm9kdWNlZCBieSBEZXZUb29scy5cbiAqIEBleHBlcmltZW50YWxcbiAqL1xuY2xhc3MgSU8ge1xuICAgIHByaXZhdGUgZXZlbnRzID0gbmV3IEV2ZW50RW1pdHRlcigpXG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGRiZzogYW55IC8qIEVsZWN0cm9uLkRlYnVnZ2VyKi8gKSB7XG5cbiAgICAgICAgaWYgKCF0aGlzLmRiZy5pc0F0dGFjaGVkKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGNyZWF0ZSBJTyBEb21haW4gQ2xhc3MgYmVjYXVzZSB0aGUgZGVidWdnZXIgaXMgbm90IGF0dGFjaGVkLmApXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgb24oZXZlbnQ6IHN0cmluZywgbGlzdGVuZXI6IEZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzLm9uKGV2ZW50LCBsaXN0ZW5lcilcbiAgICB9XG5cbiAgICBwdWJsaWMgb25jZShldmVudDogc3RyaW5nLCBsaXN0ZW5lcjogRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5ldmVudHMub24oZXZlbnQsIGxpc3RlbmVyKVxuICAgIH1cblxuICAgIHByaXZhdGUgYXNzZXJ0RXJyb3IoZXJyb3I6IGFueSwgY29tbWFuZE5hbWU6IHN0cmluZykge1xuICAgICAgICBpZiAoJ21lc3NhZ2UnIGluIGVycm9yICYmICdjb2RlJyBpbiBlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IERlYnVnZ2VyRXJyb3IoZXJyb3IubWVzc2FnZSwgZXJyb3IuY29kZSwgY29tbWFuZE5hbWUpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogUmVhZCBhIGNodW5rIG9mIHRoZSBzdHJlYW0gKi9cbiAgICBwdWJsaWMgYXN5bmMgcmVhZChwYXJhbXM6IElPLlBhcmFtcy5yZWFkKTogUHJvbWlzZTxJTy5SZXN1bHQucmVhZD57XG4gICAgICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZTxJTy5SZXN1bHQucmVhZD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kYmcuc2VuZENvbW1hbmQoJ0lPLnJlYWQnLCBwYXJhbXMsIChlcnJvcjogYW55LCByZXN1bHQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYXNzZXJ0RXJyb3IoZXJyb3IsICdJTy5yZWFkJylcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdCBhcyBJTy5SZXN1bHQucmVhZClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgLyoqIENsb3NlIHRoZSBzdHJlYW0sIGRpc2NhcmQgYW55IHRlbXBvcmFyeSBiYWNraW5nIHN0b3JhZ2UuICovXG4gICAgcHVibGljIGFzeW5jIGNsb3NlKHBhcmFtczogSU8uUGFyYW1zLmNsb3NlKTogUHJvbWlzZTx1bmRlZmluZWQ+e1xuICAgICAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2U8dW5kZWZpbmVkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRiZy5zZW5kQ29tbWFuZCgnSU8uY2xvc2UnLCBwYXJhbXMsIChlcnJvcjogYW55LCByZXN1bHQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYXNzZXJ0RXJyb3IoZXJyb3IsICdJTy5jbG9zZScpXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBJTyJdfQ==