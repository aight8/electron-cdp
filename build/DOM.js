"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const DebuggerError_1 = require("./DebuggerError");
/**
 * This domain exposes DOM read/write operations. Each DOM Node is represented with its mirror object that has an <code>id</code>. This <code>id</code> can be used to get additional information on the Node, resolve it into the JavaScript object wrapper, etc. It is important that client receives DOM events only for the nodes that are known to the client. Backend keeps track of the nodes that were sent to the client and never sends the same node twice. It is client's responsibility to collect information about the nodes that were sent to the client.<p>Note that <code>iframe</code> owner elements will return corresponding document elements as their child nodes.</p>
 */
class DOM {
    constructor(dbg /* Electron.Debugger*/) {
        this.dbg = dbg; /* Electron.Debugger*/
        this.events = new EventEmitter();
        this.dbg.on('message', (event, method, params) => {
            const [domain, domainMethod] = method.split('.');
            this.events.emit(domainMethod, params);
        });
        if (!this.dbg.isAttached()) {
            throw new Error(`Cannot create DOM Domain Class because the debugger is not attached.`);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.on(event, listener);
    }
    assertError(error, commandName) {
        if ('message' in error && 'code' in error) {
            throw new DebuggerError_1.default(error.message, error.code, commandName);
        }
    }
    /** Enables DOM agent for the given page. */
    async enable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.enable', {}, (error, result) => {
                this.assertError(error, 'DOM.enable');
                resolve();
            });
        });
    }
    /** Disables DOM agent for the given page. */
    async disable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.disable', {}, (error, result) => {
                this.assertError(error, 'DOM.disable');
                resolve();
            });
        });
    }
    /** Returns the root DOM node (and optionally the subtree) to the caller. */
    async getDocument(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.getDocument', params || {}, (error, result) => {
                this.assertError(error, 'DOM.getDocument');
                resolve(result);
            });
        });
    }
    /** Returns the root DOM node (and optionally the subtree) to the caller. */
    async getFlattenedDocument(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.getFlattenedDocument', params || {}, (error, result) => {
                this.assertError(error, 'DOM.getFlattenedDocument');
                resolve(result);
            });
        });
    }
    /**
     * Collects class names for the node with given id and all of it's child nodes.
     * @experimental
     */
    async collectClassNamesFromSubtree(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.collectClassNamesFromSubtree', params, (error, result) => {
                this.assertError(error, 'DOM.collectClassNamesFromSubtree');
                resolve(result);
            });
        });
    }
    /** Requests that children of the node with given id are returned to the caller in form of <code>setChildNodes</code> events where not only immediate children are retrieved, but all children down to the specified depth. */
    async requestChildNodes(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.requestChildNodes', params, (error, result) => {
                this.assertError(error, 'DOM.requestChildNodes');
                resolve();
            });
        });
    }
    /** Executes <code>querySelector</code> on a given node. */
    async querySelector(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.querySelector', params, (error, result) => {
                this.assertError(error, 'DOM.querySelector');
                resolve(result);
            });
        });
    }
    /** Executes <code>querySelectorAll</code> on a given node. */
    async querySelectorAll(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.querySelectorAll', params, (error, result) => {
                this.assertError(error, 'DOM.querySelectorAll');
                resolve(result);
            });
        });
    }
    /** Sets node name for a node with given id. */
    async setNodeName(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.setNodeName', params, (error, result) => {
                this.assertError(error, 'DOM.setNodeName');
                resolve(result);
            });
        });
    }
    /** Sets node value for a node with given id. */
    async setNodeValue(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.setNodeValue', params, (error, result) => {
                this.assertError(error, 'DOM.setNodeValue');
                resolve();
            });
        });
    }
    /** Removes node with given id. */
    async removeNode(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.removeNode', params, (error, result) => {
                this.assertError(error, 'DOM.removeNode');
                resolve();
            });
        });
    }
    /** Sets attribute for an element with given id. */
    async setAttributeValue(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.setAttributeValue', params, (error, result) => {
                this.assertError(error, 'DOM.setAttributeValue');
                resolve();
            });
        });
    }
    /** Sets attributes on element with given id. This method is useful when user edits some existing attribute value and types in several attribute name/value pairs. */
    async setAttributesAsText(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.setAttributesAsText', params, (error, result) => {
                this.assertError(error, 'DOM.setAttributesAsText');
                resolve();
            });
        });
    }
    /** Removes attribute with given name from an element with given id. */
    async removeAttribute(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.removeAttribute', params, (error, result) => {
                this.assertError(error, 'DOM.removeAttribute');
                resolve();
            });
        });
    }
    /** Returns node's HTML markup. */
    async getOuterHTML(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.getOuterHTML', params, (error, result) => {
                this.assertError(error, 'DOM.getOuterHTML');
                resolve(result);
            });
        });
    }
    /** Sets node HTML markup, returns new node id. */
    async setOuterHTML(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.setOuterHTML', params, (error, result) => {
                this.assertError(error, 'DOM.setOuterHTML');
                resolve();
            });
        });
    }
    /**
     * Searches for a given string in the DOM tree. Use <code>getSearchResults</code> to access search results or <code>cancelSearch</code> to end this search session.
     * @experimental
     */
    async performSearch(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.performSearch', params, (error, result) => {
                this.assertError(error, 'DOM.performSearch');
                resolve(result);
            });
        });
    }
    /**
     * Returns search results from given <code>fromIndex</code> to given <code>toIndex</code> from the sarch with the given identifier.
     * @experimental
     */
    async getSearchResults(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.getSearchResults', params, (error, result) => {
                this.assertError(error, 'DOM.getSearchResults');
                resolve(result);
            });
        });
    }
    /**
     * Discards search results from the session with the given id. <code>getSearchResults</code> should no longer be called for that search.
     * @experimental
     */
    async discardSearchResults(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.discardSearchResults', params, (error, result) => {
                this.assertError(error, 'DOM.discardSearchResults');
                resolve();
            });
        });
    }
    /** Requests that the node is sent to the caller given the JavaScript node object reference. All nodes that form the path from the node to the root are also sent to the client as a series of <code>setChildNodes</code> notifications. */
    async requestNode(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.requestNode', params, (error, result) => {
                this.assertError(error, 'DOM.requestNode');
                resolve(result);
            });
        });
    }
    /** Highlights given rectangle. */
    async highlightRect() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.highlightRect', {}, (error, result) => {
                this.assertError(error, 'DOM.highlightRect');
                resolve();
            });
        });
    }
    /** Highlights DOM node. */
    async highlightNode() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.highlightNode', {}, (error, result) => {
                this.assertError(error, 'DOM.highlightNode');
                resolve();
            });
        });
    }
    /** Hides any highlight. */
    async hideHighlight() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.hideHighlight', {}, (error, result) => {
                this.assertError(error, 'DOM.hideHighlight');
                resolve();
            });
        });
    }
    /**
     * Requests that the node is sent to the caller given its path. // FIXME, use XPath
     * @experimental
     */
    async pushNodeByPathToFrontend(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.pushNodeByPathToFrontend', params, (error, result) => {
                this.assertError(error, 'DOM.pushNodeByPathToFrontend');
                resolve(result);
            });
        });
    }
    /**
     * Requests that a batch of nodes is sent to the caller given their backend node ids.
     * @experimental
     */
    async pushNodesByBackendIdsToFrontend(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.pushNodesByBackendIdsToFrontend', params, (error, result) => {
                this.assertError(error, 'DOM.pushNodesByBackendIdsToFrontend');
                resolve(result);
            });
        });
    }
    /**
     * Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).
     * @experimental
     */
    async setInspectedNode(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.setInspectedNode', params, (error, result) => {
                this.assertError(error, 'DOM.setInspectedNode');
                resolve();
            });
        });
    }
    /** Resolves JavaScript node object for given node id. */
    async resolveNode(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.resolveNode', params, (error, result) => {
                this.assertError(error, 'DOM.resolveNode');
                resolve(result);
            });
        });
    }
    /** Returns attributes for the specified node. */
    async getAttributes(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.getAttributes', params, (error, result) => {
                this.assertError(error, 'DOM.getAttributes');
                resolve(result);
            });
        });
    }
    /**
     * Creates a deep copy of the specified node and places it into the target container before the given anchor.
     * @experimental
     */
    async copyTo(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.copyTo', params, (error, result) => {
                this.assertError(error, 'DOM.copyTo');
                resolve(result);
            });
        });
    }
    /** Moves node into the new container, places it before the given anchor. */
    async moveTo(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.moveTo', params, (error, result) => {
                this.assertError(error, 'DOM.moveTo');
                resolve(result);
            });
        });
    }
    /**
     * Undoes the last performed action.
     * @experimental
     */
    async undo() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.undo', {}, (error, result) => {
                this.assertError(error, 'DOM.undo');
                resolve();
            });
        });
    }
    /**
     * Re-does the last undone action.
     * @experimental
     */
    async redo() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.redo', {}, (error, result) => {
                this.assertError(error, 'DOM.redo');
                resolve();
            });
        });
    }
    /**
     * Marks last undoable state.
     * @experimental
     */
    async markUndoableState() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.markUndoableState', {}, (error, result) => {
                this.assertError(error, 'DOM.markUndoableState');
                resolve();
            });
        });
    }
    /**
     * Focuses the given element.
     * @experimental
     */
    async focus(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.focus', params, (error, result) => {
                this.assertError(error, 'DOM.focus');
                resolve();
            });
        });
    }
    /**
     * Sets files for the given file input element.
     * @experimental
     */
    async setFileInputFiles(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.setFileInputFiles', params, (error, result) => {
                this.assertError(error, 'DOM.setFileInputFiles');
                resolve();
            });
        });
    }
    /**
     * Returns boxes for the currently selected nodes.
     * @experimental
     */
    async getBoxModel(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.getBoxModel', params, (error, result) => {
                this.assertError(error, 'DOM.getBoxModel');
                resolve(result);
            });
        });
    }
    /**
     * Returns node id at given location.
     * @experimental
     */
    async getNodeForLocation(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.getNodeForLocation', params, (error, result) => {
                this.assertError(error, 'DOM.getNodeForLocation');
                resolve(result);
            });
        });
    }
    /**
     * Returns the id of the nearest ancestor that is a relayout boundary.
     * @experimental
     */
    async getRelayoutBoundary(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('DOM.getRelayoutBoundary', params, (error, result) => {
                this.assertError(error, 'DOM.getRelayoutBoundary');
                resolve(result);
            });
        });
    }
}
exports.default = DOM;
//# sourceMappingURL=data:application/json;base64,