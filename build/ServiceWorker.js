"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const DebuggerError_1 = require("./DebuggerError");
/**
 * No description
 * @experimental
 */
class ServiceWorker {
    constructor(dbg /* Electron.Debugger*/) {
        this.dbg = dbg; /* Electron.Debugger*/
        this.events = new EventEmitter();
        this.dbg.on('message', (event, method, params) => {
            const [domain, domainMethod] = method.split('.');
            this.events.emit(domainMethod, params);
        });
        if (!this.dbg.isAttached()) {
            throw new Error(`Cannot create ServiceWorker Domain Class because the debugger is not attached.`);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.on(event, listener);
    }
    assertError(error, commandName) {
        if ('message' in error && 'code' in error) {
            throw new DebuggerError_1.default(error.message, error.code, commandName);
        }
    }
    /** No description */
    async enable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('ServiceWorker.enable', {}, (error, result) => {
                this.assertError(error, 'ServiceWorker.enable');
                resolve();
            });
        });
    }
    /** No description */
    async disable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('ServiceWorker.disable', {}, (error, result) => {
                this.assertError(error, 'ServiceWorker.disable');
                resolve();
            });
        });
    }
    /** No description */
    async unregister(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('ServiceWorker.unregister', params, (error, result) => {
                this.assertError(error, 'ServiceWorker.unregister');
                resolve();
            });
        });
    }
    /** No description */
    async updateRegistration(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('ServiceWorker.updateRegistration', params, (error, result) => {
                this.assertError(error, 'ServiceWorker.updateRegistration');
                resolve();
            });
        });
    }
    /** No description */
    async startWorker(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('ServiceWorker.startWorker', params, (error, result) => {
                this.assertError(error, 'ServiceWorker.startWorker');
                resolve();
            });
        });
    }
    /** No description */
    async skipWaiting(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('ServiceWorker.skipWaiting', params, (error, result) => {
                this.assertError(error, 'ServiceWorker.skipWaiting');
                resolve();
            });
        });
    }
    /** No description */
    async stopWorker(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('ServiceWorker.stopWorker', params, (error, result) => {
                this.assertError(error, 'ServiceWorker.stopWorker');
                resolve();
            });
        });
    }
    /** No description */
    async inspectWorker(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('ServiceWorker.inspectWorker', params, (error, result) => {
                this.assertError(error, 'ServiceWorker.inspectWorker');
                resolve();
            });
        });
    }
    /** No description */
    async setForceUpdateOnPageLoad(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('ServiceWorker.setForceUpdateOnPageLoad', params, (error, result) => {
                this.assertError(error, 'ServiceWorker.setForceUpdateOnPageLoad');
                resolve();
            });
        });
    }
    /** No description */
    async deliverPushMessage(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('ServiceWorker.deliverPushMessage', params, (error, result) => {
                this.assertError(error, 'ServiceWorker.deliverPushMessage');
                resolve();
            });
        });
    }
    /** No description */
    async dispatchSyncEvent(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('ServiceWorker.dispatchSyncEvent', params, (error, result) => {
                this.assertError(error, 'ServiceWorker.dispatchSyncEvent');
                resolve();
            });
        });
    }
}
exports.default = ServiceWorker;
//# sourceMappingURL=data:application/json;base64,