"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const DebuggerError_1 = require("./DebuggerError");
/**
 * This domain provides various functionality related to drawing atop the inspected page.
 * @experimental
 */
class Overlay {
    constructor(dbg /* Electron.Debugger*/) {
        this.dbg = dbg; /* Electron.Debugger*/
        this.events = new EventEmitter();
        this.dbg.on('message', (event, method, params) => {
            const [domain, domainMethod] = method.split('.');
            this.events.emit(domainMethod, params);
        });
        if (!this.dbg.isAttached()) {
            throw new Error(`Cannot create Overlay Domain Class because the debugger is not attached.`);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.on(event, listener);
    }
    assertError(error, commandName) {
        if ('message' in error && 'code' in error) {
            throw new DebuggerError_1.default(error.message, error.code, commandName);
        }
    }
    /** Enables domain notifications. */
    async enable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Overlay.enable', {}, (error, result) => {
                this.assertError(error, 'Overlay.enable');
                resolve();
            });
        });
    }
    /** Disables domain notifications. */
    async disable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Overlay.disable', {}, (error, result) => {
                this.assertError(error, 'Overlay.disable');
                resolve();
            });
        });
    }
    /** Requests that backend shows paint rectangles */
    async setShowPaintRects(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Overlay.setShowPaintRects', params, (error, result) => {
                this.assertError(error, 'Overlay.setShowPaintRects');
                resolve();
            });
        });
    }
    /** Requests that backend shows debug borders on layers */
    async setShowDebugBorders(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Overlay.setShowDebugBorders', params, (error, result) => {
                this.assertError(error, 'Overlay.setShowDebugBorders');
                resolve();
            });
        });
    }
    /** Requests that backend shows the FPS counter */
    async setShowFPSCounter(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Overlay.setShowFPSCounter', params, (error, result) => {
                this.assertError(error, 'Overlay.setShowFPSCounter');
                resolve();
            });
        });
    }
    /** Requests that backend shows scroll bottleneck rects */
    async setShowScrollBottleneckRects(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Overlay.setShowScrollBottleneckRects', params, (error, result) => {
                this.assertError(error, 'Overlay.setShowScrollBottleneckRects');
                resolve();
            });
        });
    }
    /** Paints viewport size upon main frame resize. */
    async setShowViewportSizeOnResize(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Overlay.setShowViewportSizeOnResize', params, (error, result) => {
                this.assertError(error, 'Overlay.setShowViewportSizeOnResize');
                resolve();
            });
        });
    }
    /** No description */
    async setPausedInDebuggerMessage(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Overlay.setPausedInDebuggerMessage', params || {}, (error, result) => {
                this.assertError(error, 'Overlay.setPausedInDebuggerMessage');
                resolve();
            });
        });
    }
    /** No description */
    async setSuspended(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Overlay.setSuspended', params, (error, result) => {
                this.assertError(error, 'Overlay.setSuspended');
                resolve();
            });
        });
    }
    /** Enters the 'inspect' mode. In this mode, elements that user is hovering over are highlighted. Backend then generates 'inspectNodeRequested' event upon element selection. */
    async setInspectMode(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Overlay.setInspectMode', params, (error, result) => {
                this.assertError(error, 'Overlay.setInspectMode');
                resolve();
            });
        });
    }
    /** Highlights given rectangle. Coordinates are absolute with respect to the main frame viewport. */
    async highlightRect(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Overlay.highlightRect', params, (error, result) => {
                this.assertError(error, 'Overlay.highlightRect');
                resolve();
            });
        });
    }
    /** Highlights given quad. Coordinates are absolute with respect to the main frame viewport. */
    async highlightQuad(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Overlay.highlightQuad', params, (error, result) => {
                this.assertError(error, 'Overlay.highlightQuad');
                resolve();
            });
        });
    }
    /** Highlights DOM node with given id or with the given JavaScript object wrapper. Either nodeId or objectId must be specified. */
    async highlightNode(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Overlay.highlightNode', params, (error, result) => {
                this.assertError(error, 'Overlay.highlightNode');
                resolve();
            });
        });
    }
    /** Highlights owner element of the frame with given id. */
    async highlightFrame(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Overlay.highlightFrame', params, (error, result) => {
                this.assertError(error, 'Overlay.highlightFrame');
                resolve();
            });
        });
    }
    /** Hides any highlight. */
    async hideHighlight() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Overlay.hideHighlight', {}, (error, result) => {
                this.assertError(error, 'Overlay.hideHighlight');
                resolve();
            });
        });
    }
    /** For testing. */
    async getHighlightObjectForTest(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Overlay.getHighlightObjectForTest', params, (error, result) => {
                this.assertError(error, 'Overlay.getHighlightObjectForTest');
                resolve(result);
            });
        });
    }
}
exports.default = Overlay;
//# sourceMappingURL=data:application/json;base64,