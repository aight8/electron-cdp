"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const DebuggerError_1 = require("./DebuggerError");
/**
 * This domain is deprecated - use Runtime or Log instead.
 */
class Console {
    constructor(dbg /* Electron.Debugger*/) {
        this.dbg = dbg; /* Electron.Debugger*/
        this.events = new EventEmitter();
        this.dbg.on('message', (event, method, params) => {
            const [domain, domainMethod] = method.split('.');
            this.events.emit(domainMethod, params);
        });
        if (!this.dbg.isAttached()) {
            throw new Error(`Cannot create Console Domain Class because the debugger is not attached.`);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.on(event, listener);
    }
    assertError(error, commandName) {
        if ('message' in error && 'code' in error) {
            throw new DebuggerError_1.default(error.message, error.code, commandName);
        }
    }
    /** Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification. */
    async enable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Console.enable', {}, (error, result) => {
                this.assertError(error, 'Console.enable');
                resolve();
            });
        });
    }
    /** Disables console domain, prevents further console messages from being reported to the client. */
    async disable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Console.disable', {}, (error, result) => {
                this.assertError(error, 'Console.disable');
                resolve();
            });
        });
    }
    /** Does nothing. */
    async clearMessages() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Console.clearMessages', {}, (error, result) => {
                this.assertError(error, 'Console.clearMessages');
                resolve();
            });
        });
    }
}
exports.default = Console;
//# sourceMappingURL=data:application/json;base64,