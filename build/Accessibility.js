"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const DebuggerError_1 = require("./DebuggerError");
/**
 * No description
 * @experimental
 */
class Accessibility {
    constructor(dbg /* Electron.Debugger*/) {
        this.dbg = dbg; /* Electron.Debugger*/
        this.events = new EventEmitter();
        if (!this.dbg.isAttached()) {
            throw new Error(`Cannot create Accessibility Domain Class because the debugger is not attached.`);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.on(event, listener);
    }
    assertError(error, commandName) {
        if ('message' in error && 'code' in error) {
            throw new DebuggerError_1.default(error.message, error.code, commandName);
        }
    }
    /**
     * Fetches the accessibility node and partial accessibility tree for this DOM node, if it exists.
     * @experimental
     */
    async getPartialAXTree(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Accessibility.getPartialAXTree', params, (error, result) => {
                this.assertError(error, 'Accessibility.getPartialAXTree');
                resolve(result);
            });
        });
    }
}
exports.default = Accessibility;
//# sourceMappingURL=data:application/json;base64,