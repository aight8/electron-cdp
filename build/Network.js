"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const DebuggerError_1 = require("./DebuggerError");
/**
 * Network domain allows tracking network activities of the page. It exposes information about http, file, data and other requests and responses, their headers, bodies, timing, etc.
 */
class Network {
    constructor(dbg /* Electron.Debugger*/) {
        this.dbg = dbg; /* Electron.Debugger*/
        this.events = new EventEmitter();
        this.dbg.on('message', (event, method, params) => {
            const [domain, domainMethod] = method.split('.');
            this.events.emit(domainMethod, params);
        });
        if (!this.dbg.isAttached()) {
            throw new Error(`Cannot create Network Domain Class because the debugger is not attached.`);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.on(event, listener);
    }
    assertError(error, commandName) {
        if ('message' in error && 'code' in error) {
            throw new DebuggerError_1.default(error.message, error.code, commandName);
        }
    }
    /** Enables network tracking, network events will now be delivered to the client. */
    async enable(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Network.enable', params || {}, (error, result) => {
                this.assertError(error, 'Network.enable');
                resolve();
            });
        });
    }
    /** Disables network tracking, prevents network events from being sent to the client. */
    async disable() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Network.disable', {}, (error, result) => {
                this.assertError(error, 'Network.disable');
                resolve();
            });
        });
    }
    /** Allows overriding user agent with the given string. */
    async setUserAgentOverride(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Network.setUserAgentOverride', params, (error, result) => {
                this.assertError(error, 'Network.setUserAgentOverride');
                resolve();
            });
        });
    }
    /** Specifies whether to always send extra HTTP headers with the requests from this page. */
    async setExtraHTTPHeaders(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Network.setExtraHTTPHeaders', params, (error, result) => {
                this.assertError(error, 'Network.setExtraHTTPHeaders');
                resolve();
            });
        });
    }
    /** Returns content served for the given request. */
    async getResponseBody(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Network.getResponseBody', params, (error, result) => {
                this.assertError(error, 'Network.getResponseBody');
                resolve(result);
            });
        });
    }
    /**
     * Blocks URLs from loading.
     * @experimental
     */
    async setBlockedURLs(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Network.setBlockedURLs', params, (error, result) => {
                this.assertError(error, 'Network.setBlockedURLs');
                resolve();
            });
        });
    }
    /**
     * This method sends a new XMLHttpRequest which is identical to the original one. The following parameters should be identical: method, url, async, request body, extra headers, withCredentials attribute, user, password.
     * @experimental
     */
    async replayXHR(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Network.replayXHR', params, (error, result) => {
                this.assertError(error, 'Network.replayXHR');
                resolve();
            });
        });
    }
    /** Tells whether clearing browser cache is supported. */
    async canClearBrowserCache() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Network.canClearBrowserCache', {}, (error, result) => {
                this.assertError(error, 'Network.canClearBrowserCache');
                resolve(result);
            });
        });
    }
    /** Clears browser cache. */
    async clearBrowserCache() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Network.clearBrowserCache', {}, (error, result) => {
                this.assertError(error, 'Network.clearBrowserCache');
                resolve();
            });
        });
    }
    /** Tells whether clearing browser cookies is supported. */
    async canClearBrowserCookies() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Network.canClearBrowserCookies', {}, (error, result) => {
                this.assertError(error, 'Network.canClearBrowserCookies');
                resolve(result);
            });
        });
    }
    /** Clears browser cookies. */
    async clearBrowserCookies() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Network.clearBrowserCookies', {}, (error, result) => {
                this.assertError(error, 'Network.clearBrowserCookies');
                resolve();
            });
        });
    }
    /**
     * Returns all browser cookies for the current URL. Depending on the backend support, will return detailed cookie information in the <code>cookies</code> field.
     * @experimental
     */
    async getCookies(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Network.getCookies', params || {}, (error, result) => {
                this.assertError(error, 'Network.getCookies');
                resolve(result);
            });
        });
    }
    /**
     * Returns all browser cookies. Depending on the backend support, will return detailed cookie information in the <code>cookies</code> field.
     * @experimental
     */
    async getAllCookies() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Network.getAllCookies', {}, (error, result) => {
                this.assertError(error, 'Network.getAllCookies');
                resolve(result);
            });
        });
    }
    /**
     * Deletes browser cookie with given name, domain and path.
     * @experimental
     */
    async deleteCookie(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Network.deleteCookie', params, (error, result) => {
                this.assertError(error, 'Network.deleteCookie');
                resolve();
            });
        });
    }
    /**
     * Sets a cookie with the given cookie data; may overwrite equivalent cookies if they exist.
     * @experimental
     */
    async setCookie(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Network.setCookie', params, (error, result) => {
                this.assertError(error, 'Network.setCookie');
                resolve(result);
            });
        });
    }
    /**
     * Tells whether emulation of network conditions is supported.
     * @experimental
     */
    async canEmulateNetworkConditions() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Network.canEmulateNetworkConditions', {}, (error, result) => {
                this.assertError(error, 'Network.canEmulateNetworkConditions');
                resolve(result);
            });
        });
    }
    /** Activates emulation of network conditions. */
    async emulateNetworkConditions(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Network.emulateNetworkConditions', params, (error, result) => {
                this.assertError(error, 'Network.emulateNetworkConditions');
                resolve();
            });
        });
    }
    /** Toggles ignoring cache for each request. If <code>true</code>, cache will not be used. */
    async setCacheDisabled(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Network.setCacheDisabled', params, (error, result) => {
                this.assertError(error, 'Network.setCacheDisabled');
                resolve();
            });
        });
    }
    /**
     * Toggles ignoring of service worker for each request.
     * @experimental
     */
    async setBypassServiceWorker(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Network.setBypassServiceWorker', params, (error, result) => {
                this.assertError(error, 'Network.setBypassServiceWorker');
                resolve();
            });
        });
    }
    /**
     * For testing.
     * @experimental
     */
    async setDataSizeLimitsForTest(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Network.setDataSizeLimitsForTest', params, (error, result) => {
                this.assertError(error, 'Network.setDataSizeLimitsForTest');
                resolve();
            });
        });
    }
    /**
     * Returns the DER-encoded certificate.
     * @experimental
     */
    async getCertificate(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Network.getCertificate', params, (error, result) => {
                this.assertError(error, 'Network.getCertificate');
                resolve(result);
            });
        });
    }
}
exports.default = Network;
//# sourceMappingURL=data:application/json;base64,