"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventEmitter = require("events");
const DebuggerError_1 = require("./DebuggerError");
/**
 * This domain emulates different environments for the page.
 */
class Emulation {
    constructor(dbg /* Electron.Debugger*/) {
        this.dbg = dbg; /* Electron.Debugger*/
        this.events = new EventEmitter();
        this.dbg.on('message', (event, method, params) => {
            const [domain, domainMethod] = method.split('.');
            this.events.emit(domainMethod, params);
        });
        if (!this.dbg.isAttached()) {
            throw new Error(`Cannot create Emulation Domain Class because the debugger is not attached.`);
        }
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.on(event, listener);
    }
    assertError(error, commandName) {
        if ('message' in error && 'code' in error) {
            throw new DebuggerError_1.default(error.message, error.code, commandName);
        }
    }
    /** Overrides the values of device screen dimensions (window.screen.width, window.screen.height, window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media query results). */
    async setDeviceMetricsOverride(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Emulation.setDeviceMetricsOverride', params, (error, result) => {
                this.assertError(error, 'Emulation.setDeviceMetricsOverride');
                resolve();
            });
        });
    }
    /** Clears the overriden device metrics. */
    async clearDeviceMetricsOverride() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Emulation.clearDeviceMetricsOverride', {}, (error, result) => {
                this.assertError(error, 'Emulation.clearDeviceMetricsOverride');
                resolve();
            });
        });
    }
    /**
     * Overrides the visible area of the page. The change is hidden from the page, i.e. the observable scroll position and page scale does not change. In effect, the command moves the specified area of the page into the top-left corner of the frame.
     * @experimental
     */
    async forceViewport(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Emulation.forceViewport', params, (error, result) => {
                this.assertError(error, 'Emulation.forceViewport');
                resolve();
            });
        });
    }
    /**
     * Resets the visible area of the page to the original viewport, undoing any effects of the <code>forceViewport</code> command.
     * @experimental
     */
    async resetViewport() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Emulation.resetViewport', {}, (error, result) => {
                this.assertError(error, 'Emulation.resetViewport');
                resolve();
            });
        });
    }
    /**
     * Requests that page scale factor is reset to initial values.
     * @experimental
     */
    async resetPageScaleFactor() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Emulation.resetPageScaleFactor', {}, (error, result) => {
                this.assertError(error, 'Emulation.resetPageScaleFactor');
                resolve();
            });
        });
    }
    /**
     * Sets a specified page scale factor.
     * @experimental
     */
    async setPageScaleFactor(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Emulation.setPageScaleFactor', params, (error, result) => {
                this.assertError(error, 'Emulation.setPageScaleFactor');
                resolve();
            });
        });
    }
    /**
     * Resizes the frame/viewport of the page. Note that this does not affect the frame's container (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported on Android.
     * @experimental
     */
    async setVisibleSize(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Emulation.setVisibleSize', params, (error, result) => {
                this.assertError(error, 'Emulation.setVisibleSize');
                resolve();
            });
        });
    }
    /**
     * Switches script execution in the page.
     * @experimental
     */
    async setScriptExecutionDisabled(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Emulation.setScriptExecutionDisabled', params, (error, result) => {
                this.assertError(error, 'Emulation.setScriptExecutionDisabled');
                resolve();
            });
        });
    }
    /**
     * Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position unavailable.
     * @experimental
     */
    async setGeolocationOverride(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Emulation.setGeolocationOverride', params || {}, (error, result) => {
                this.assertError(error, 'Emulation.setGeolocationOverride');
                resolve();
            });
        });
    }
    /**
     * Clears the overriden Geolocation Position and Error.
     * @experimental
     */
    async clearGeolocationOverride() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Emulation.clearGeolocationOverride', {}, (error, result) => {
                this.assertError(error, 'Emulation.clearGeolocationOverride');
                resolve();
            });
        });
    }
    /** Toggles mouse event-based touch event emulation. */
    async setTouchEmulationEnabled(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Emulation.setTouchEmulationEnabled', params, (error, result) => {
                this.assertError(error, 'Emulation.setTouchEmulationEnabled');
                resolve();
            });
        });
    }
    /** Emulates the given media for CSS media queries. */
    async setEmulatedMedia(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Emulation.setEmulatedMedia', params, (error, result) => {
                this.assertError(error, 'Emulation.setEmulatedMedia');
                resolve();
            });
        });
    }
    /**
     * Enables CPU throttling to emulate slow CPUs.
     * @experimental
     */
    async setCPUThrottlingRate(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Emulation.setCPUThrottlingRate', params, (error, result) => {
                this.assertError(error, 'Emulation.setCPUThrottlingRate');
                resolve();
            });
        });
    }
    /**
     * Tells whether emulation is supported.
     * @experimental
     */
    async canEmulate() {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Emulation.canEmulate', {}, (error, result) => {
                this.assertError(error, 'Emulation.canEmulate');
                resolve(result);
            });
        });
    }
    /**
     * Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets the current virtual time policy.  Note this supersedes any previous time budget.
     * @experimental
     */
    async setVirtualTimePolicy(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Emulation.setVirtualTimePolicy', params, (error, result) => {
                this.assertError(error, 'Emulation.setVirtualTimePolicy');
                resolve();
            });
        });
    }
    /**
     * Sets or clears an override of the default background color of the frame. This override is used if the content does not specify one.
     * @experimental
     */
    async setDefaultBackgroundColorOverride(params) {
        return await new Promise((resolve, reject) => {
            this.dbg.sendCommand('Emulation.setDefaultBackgroundColorOverride', params || {}, (error, result) => {
                this.assertError(error, 'Emulation.setDefaultBackgroundColorOverride');
                resolve();
            });
        });
    }
}
exports.default = Emulation;
//# sourceMappingURL=data:application/json;base64,